versions pytest-3.0.0, py-1.4.31, python-3.5.2.final.0
cwd=/Users/james/Documents/Recurse_Center/irc_server/chirc
args=['tests/', '--chirc-exe=./chirc', '--randomize-ports', '-C', 'PRIVMSG_NOTICE', '--debug']

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x10322b128>
    pytest_plugin_registered [hook]
        manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
        plugin: <Session 'chirc'>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x10322b128>
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x10350a5f8>
      finish pytest_plugin_registered --> [] [hook]
    find_module called for: py._io.terminalwriter [assertion]
    find_module called for: termios [assertion]
    find_module called for: fcntl [assertion]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.config.PytestPluginManager object at 0x10217c438>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <_pytest.config.PytestPluginManager object at 0x10217c438>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.config.Config object at 0x10322b128>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <_pytest.config.Config object at 0x10322b128>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.mark' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/mark.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.mark' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/mark.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.main' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/main.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.main' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/main.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.terminal' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/terminal.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.terminal' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/terminal.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.runner' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/runner.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.runner' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/runner.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.python' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/python.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.python' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/python.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.fixtures' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/fixtures.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.fixtures' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/fixtures.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.debugging' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/debugging.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.debugging' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/debugging.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.unittest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/unittest.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.unittest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/unittest.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.capture' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/capture.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.capture' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/capture.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.skipping' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/skipping.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.skipping' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/skipping.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.tmpdir' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/tmpdir.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.tmpdir' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/tmpdir.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.monkeypatch' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/monkeypatch.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.monkeypatch' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/monkeypatch.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.recwarn' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/recwarn.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.recwarn' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/recwarn.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.pastebin' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/pastebin.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.pastebin' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/pastebin.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.helpconfig' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/helpconfig.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.helpconfig' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/helpconfig.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.nose' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/nose.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.nose' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/nose.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.assertion' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/__init__.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.assertion' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/__init__.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.junitxml' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/junitxml.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.junitxml' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/junitxml.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.resultlog' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/resultlog.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.resultlog' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/resultlog.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.doctest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/doctest.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.doctest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/doctest.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.cacheprovider' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/cacheprovider.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.cacheprovider' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/cacheprovider.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.freeze_support' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/freeze_support.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.freeze_support' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/freeze_support.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.setuponly' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/setuponly.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.setuponly' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/setuponly.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.setupplan' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/setupplan.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.setupplan' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/setupplan.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.capture.CaptureManager object at 0x1033a30b8>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <_pytest.capture.CaptureManager object at 0x1033a30b8>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module 'conftest' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module 'conftest' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <Session 'chirc'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <Session 'chirc'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x10350a5f8>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <_pytest.cacheprovider.LFPlugin object at 0x10350a5f8>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.terminal.TerminalReporter object at 0x10350a940>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session 'chirc'>
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.config.PytestPluginManager object at 0x10217c438>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <_pytest.config.PytestPluginManager object at 0x10217c438>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.config.Config object at 0x10322b128>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <_pytest.config.Config object at 0x10322b128>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.mark' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/mark.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.mark' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/mark.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.main' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/main.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.main' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/main.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.terminal' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/terminal.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.terminal' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/terminal.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.runner' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/runner.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.runner' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/runner.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.python' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/python.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.python' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/python.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.fixtures' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/fixtures.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.fixtures' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/fixtures.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.debugging' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/debugging.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.debugging' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/debugging.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.unittest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/unittest.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.unittest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/unittest.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.capture' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/capture.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.capture' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/capture.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.skipping' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/skipping.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.skipping' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/skipping.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.tmpdir' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/tmpdir.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.tmpdir' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/tmpdir.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.monkeypatch' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/monkeypatch.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.monkeypatch' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/monkeypatch.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.recwarn' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/recwarn.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.recwarn' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/recwarn.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.pastebin' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/pastebin.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.pastebin' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/pastebin.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.helpconfig' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/helpconfig.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.helpconfig' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/helpconfig.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.nose' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/nose.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.nose' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/nose.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.assertion' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/__init__.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.assertion' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/__init__.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.junitxml' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/junitxml.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.junitxml' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/junitxml.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.resultlog' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/resultlog.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.resultlog' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/resultlog.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.doctest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/doctest.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.doctest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/doctest.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.cacheprovider' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/cacheprovider.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.cacheprovider' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/cacheprovider.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.freeze_support' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/freeze_support.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.freeze_support' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/freeze_support.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.setuponly' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/setuponly.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.setuponly' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/setuponly.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module '_pytest.setupplan' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/setupplan.py'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module '_pytest.setupplan' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/setupplan.py'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.capture.CaptureManager object at 0x1033a30b8>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <_pytest.capture.CaptureManager object at 0x1033a30b8>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <module 'conftest' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <module 'conftest' (<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <Session 'chirc'>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <Session 'chirc'>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x10350a5f8>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <_pytest.cacheprovider.LFPlugin object at 0x10350a5f8>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.terminal.TerminalReporter object at 0x10350a940>
          __multicall__: <_MultiCall 0 results, 0 meths, kwargs={'manager': <_pytest.config.PytestPluginManager object at 0x10217c438>, 'plugin': <_pytest.terminal.TerminalReporter object at 0x10350a940>, '__multicall__': <_MultiCall 0 results, 0 meths, kwargs={...}>}>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          manager: <_pytest.config.PytestPluginManager object at 0x10217c438>
          plugin: <_pytest.fixtures.FixtureManager object at 0x103512f60>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x10322b128>
          startdir: /Users/james/Documents/Recurse_Center/irc_server/chirc
      finish pytest_report_header --> [['rootdir: /Users/james/Documents/Recurse_Center/irc_server/chirc, inifile: '], ['using: pytest-3.0.0 pylib-1.4.31']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session 'chirc'>
    perform_collect <Session 'chirc'> ['tests/'] [collection]
        pytest_collectstart [hook]
            collector: <Session 'chirc'>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session 'chirc'>
        processing argument /Users/james/Documents/Recurse_Center/irc_server/chirc/tests [collection]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/__pycache__
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/__pycache__
                parent: <Session 'chirc'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc
                parent: <Session 'chirc'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/conftest.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/conftest.py
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/grade.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/grade.py
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/__pycache__/conftest.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/__pycache__/conftest.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__
                parent: <Session 'chirc'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests
                parent: <Session 'chirc'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__init__.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__init__.py
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/client.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/client.py
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/replies.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/replies.py
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/types.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/types.py
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__/__init__.cpython-35.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__/__init__.cpython-35.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__/client.cpython-35.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__/client.cpython-35.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__/replies.cpython-35.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__/replies.cpython-35.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__/types.cpython-35.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/__pycache__/types.cpython-35.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__
                parent: <Session 'chirc'>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__init__.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__init__.py
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/common.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/common.py
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/fixtures.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/fixtures.py
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_channel.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_channel.py
                parent: <Session 'chirc'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_channel.py
                  parent: <Session 'chirc'>
              finish pytest_pycollect_makemodule --> <Module 'tests/chirc/tests/test_channel.py'> [hook]
            finish pytest_collect_file --> [<Module 'tests/chirc/tests/test_channel.py'>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_connection.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_connection.py
                parent: <Session 'chirc'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_connection.py
                  parent: <Session 'chirc'>
              finish pytest_pycollect_makemodule --> <Module 'tests/chirc/tests/test_connection.py'> [hook]
            finish pytest_collect_file --> [<Module 'tests/chirc/tests/test_connection.py'>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_lusers_motd.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_lusers_motd.py
                parent: <Session 'chirc'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_lusers_motd.py
                  parent: <Session 'chirc'>
              finish pytest_pycollect_makemodule --> <Module 'tests/chirc/tests/test_lusers_motd.py'> [hook]
            finish pytest_collect_file --> [<Module 'tests/chirc/tests/test_lusers_motd.py'>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_modes.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_modes.py
                parent: <Session 'chirc'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_modes.py
                  parent: <Session 'chirc'>
              finish pytest_pycollect_makemodule --> <Module 'tests/chirc/tests/test_modes.py'> [hook]
            finish pytest_collect_file --> [<Module 'tests/chirc/tests/test_modes.py'>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_ping.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_ping.py
                parent: <Session 'chirc'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_ping.py
                  parent: <Session 'chirc'>
              finish pytest_pycollect_makemodule --> <Module 'tests/chirc/tests/test_ping.py'> [hook]
            finish pytest_collect_file --> [<Module 'tests/chirc/tests/test_ping.py'>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_privmsg.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_privmsg.py
                parent: <Session 'chirc'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_privmsg.py
                  parent: <Session 'chirc'>
              finish pytest_pycollect_makemodule --> <Module 'tests/chirc/tests/test_privmsg.py'> [hook]
            finish pytest_collect_file --> [<Module 'tests/chirc/tests/test_privmsg.py'>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_robustness.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_robustness.py
                parent: <Session 'chirc'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_robustness.py
                  parent: <Session 'chirc'>
              finish pytest_pycollect_makemodule --> <Module 'tests/chirc/tests/test_robustness.py'> [hook]
            finish pytest_collect_file --> [<Module 'tests/chirc/tests/test_robustness.py'>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_unknown.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_unknown.py
                parent: <Session 'chirc'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_unknown.py
                  parent: <Session 'chirc'>
              finish pytest_pycollect_makemodule --> <Module 'tests/chirc/tests/test_unknown.py'> [hook]
            finish pytest_collect_file --> [<Module 'tests/chirc/tests/test_unknown.py'>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_whois.py
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_whois.py
                parent: <Session 'chirc'>
              pytest_pycollect_makemodule [hook]
                  path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_whois.py
                  parent: <Session 'chirc'>
              finish pytest_pycollect_makemodule --> <Module 'tests/chirc/tests/test_whois.py'> [hook]
            finish pytest_collect_file --> [<Module 'tests/chirc/tests/test_whois.py'>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/__init__.cpython-35.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/__init__.cpython-35.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/common.cpython-35.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/common.cpython-35.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/fixtures.cpython-35.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/fixtures.cpython-35.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_channel.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_channel.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_connection.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_connection.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_lusers_motd.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_lusers_motd.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_modes.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_modes.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_ping.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_ping.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_privmsg.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_privmsg.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_robustness.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_robustness.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_unknown.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_unknown.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x10322b128>
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_whois.cpython-35-PYTEST.pyc
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_whois.cpython-35-PYTEST.pyc
                parent: <Session 'chirc'>
            finish pytest_collect_file --> [] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=9 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=9 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module 'tests/chirc/tests/test_channel.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'tests/chirc/tests/test_channel.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'tests/chirc/tests/test_channel.py'>
      find_module called for: chirc.tests.test_channel [assertion]
      matched test file '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_channel.py' [assertion]
      found cached rewritten pyc for '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_channel.py' [assertion]
      find_module called for: chirc.tests.fixtures [assertion]
        pytest_pycollect_makeitem [hook]
            name: channels3
            obj: {'#test1': ('@user1', 'user2', 'user3'), '#test5': ('@user1', '@user5'), '#test3': ('@user3', '@user4', 'user5', 'user6'), '#test4': ('@user7', '+user8', '+user9', 'user1', 'user2'), '#test2': ('@user2',), None: ('user10', 'user11')}
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestChannelNOTICE
            obj: <class 'chirc.tests.test_channel.TestChannelNOTICE'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestChannelNOTICE'> [hook]
        pytest_pycollect_makeitem [hook]
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestPART
            obj: <class 'chirc.tests.test_channel.TestPART'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestPART'> [hook]
        pytest_pycollect_makeitem [hook]
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/rewrite.py'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __spec__
            obj: ModuleSpec(name='chirc.tests.test_channel', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: replies
            obj: <module 'chirc.replies' from '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/replies.py'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestChannelUPDATE1b
            obj: <class 'chirc.tests.test_channel.TestChannelUPDATE1b'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestChannelUPDATE1b'> [hook]
        pytest_pycollect_makeitem [hook]
            name: TestWHO
            obj: <class 'chirc.tests.test_channel.TestWHO'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestWHO'> [hook]
        pytest_pycollect_makeitem [hook]
            name: TestLIST
            obj: <class 'chirc.tests.test_channel.TestLIST'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestLIST'> [hook]
        pytest_pycollect_makeitem [hook]
            name: pytest
            obj: <module 'pytest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytest.py'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __file__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_channel.py
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestTOPIC
            obj: <class 'chirc.tests.test_channel.TestTOPIC'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestTOPIC'> [hook]
        pytest_pycollect_makeitem [hook]
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __name__
            obj: chirc.tests.test_channel
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: channels1
            obj: {'#test1': ('@user1', 'user2', 'user3'), '#test2': ('@user4', 'user5', 'user6'), '#test3': ('@user7', 'user8', 'user9')}
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: channels4
            obj: {None: ('user1', 'user2', 'user3', 'user4', 'user5')}
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: ReplyTimeoutException
            obj: <class 'chirc.types.ReplyTimeoutException'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestJOIN
            obj: <class 'chirc.tests.test_channel.TestJOIN'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestJOIN'> [hook]
        pytest_pycollect_makeitem [hook]
            name: channels2
            obj: {'#test1': ('@user1', 'user2', 'user3'), None: ('user10', 'user11'), '#test2': ('@user4', 'user5', 'user6'), '#test3': ('@user7', 'user8', 'user9')}
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __package__
            obj: chirc.tests
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __cached__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_channel.cpython-35-PYTEST.pyc
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestNAMES
            obj: <class 'chirc.tests.test_channel.TestNAMES'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestNAMES'> [hook]
        pytest_pycollect_makeitem [hook]
            name: TestChannelPRIVMSG
            obj: <class 'chirc.tests.test_channel.TestChannelPRIVMSG'>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestChannelPRIVMSG'> [hook]
        pytest_pycollect_makeitem [hook]
            name: __builtins__
            obj: {'hash': <built-in function hash>, 'hasattr': <built-in function hasattr>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'IndentationError': <class 'IndentationError'>, 'len': <built-in function len>, 'IndexError': <class 'IndexError'>, 'complex': <class 'complex'>, 'id': <built-in function id>, 'OverflowError': <class 'OverflowError'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'bin': <built-in function bin>, '__build_class__': <built-in function __build_class__>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'SystemExit': <class 'SystemExit'>, 'TimeoutError': <class 'TimeoutError'>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'IsADirectoryError': <class 'IsADirectoryError'>, 'EOFError': <class 'EOFError'>, 'NameError': <class 'NameError'>, 'round': <built-in function round>, 'RuntimeError': <class 'RuntimeError'>, 'compile': <built-in function compile>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'vars': <built-in function vars>, 'MemoryError': <class 'MemoryError'>, 'True': True, 'ValueError': <class 'ValueError'>, 'pow': <built-in function pow>, 'AttributeError': <class 'AttributeError'>, 'classmethod': <class 'classmethod'>, 'FloatingPointError': <class 'FloatingPointError'>, 'max': <built-in function max>, 'UnicodeError': <class 'UnicodeError'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'format': <built-in function format>, 'frozenset': <class 'frozenset'>, 'sorted': <built-in function sorted>, 'eval': <built-in function eval>, 'SyntaxError': <class 'SyntaxError'>, '__import__': <built-in function __import__>, 'dict': <class 'dict'>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'ProcessLookupError': <class 'ProcessLookupError'>, 'any': <built-in function any>, 'type': <class 'type'>, 'memoryview': <class 'memoryview'>, 'open': <built-in function open>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'float': <class 'float'>, 'BytesWarning': <class 'BytesWarning'>, 'copyright': Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'help': Type help() for interactive help, or help(object) for help about object., 'IOError': <class 'OSError'>, 'TypeError': <class 'TypeError'>, 'ImportWarning': <class 'ImportWarning'>, 'abs': <built-in function abs>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 'set': <class 'set'>, 'None': None, 'LookupError': <class 'LookupError'>, 'str': <class 'str'>, 'exec': <built-in function exec>, 'super': <class 'super'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'enumerate': <class 'enumerate'>, 'tuple': <class 'tuple'>, 'RecursionError': <class 'RecursionError'>, 'FutureWarning': <class 'FutureWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'hex': <built-in function hex>, 'zip': <class 'zip'>, 'slice': <class 'slice'>, 'list': <class 'list'>, 'bool': <class 'bool'>, 'Exception': <class 'Exception'>, 'OSError': <class 'OSError'>, 'globals': <built-in function globals>, 'NotImplementedError': <class 'NotImplementedError'>, 'GeneratorExit': <class 'GeneratorExit'>, 'getattr': <built-in function getattr>, 'SystemError': <class 'SystemError'>, 'Warning': <class 'Warning'>, 'ArithmeticError': <class 'ArithmeticError'>, 'BaseException': <class 'BaseException'>, 'next': <built-in function next>, 'PermissionError': <class 'PermissionError'>, 'map': <class 'map'>, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'AssertionError': <class 'AssertionError'>, 'InterruptedError': <class 'InterruptedError'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'KeyError': <class 'KeyError'>, 'ReferenceError': <class 'ReferenceError'>, '__package__': '', 'ord': <built-in function ord>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'EnvironmentError': <class 'OSError'>, 'delattr': <built-in function delattr>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'UserWarning': <class 'UserWarning'>, 'ChildProcessError': <class 'ChildProcessError'>, '__debug__': True, 'bytearray': <class 'bytearray'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'isinstance': <built-in function isinstance>, 'divmod': <built-in function divmod>, 'input': <built-in function input>, 'ImportError': <class 'ImportError'>, 'chr': <built-in function chr>, 'Ellipsis': Ellipsis, 'False': False, 'RuntimeWarning': <class 'RuntimeWarning'>, 'TabError': <class 'TabError'>, 'min': <built-in function min>, 'property': <class 'property'>, 'FileExistsError': <class 'FileExistsError'>, 'bytes': <class 'bytes'>, 'locals': <built-in function locals>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'object': <class 'object'>, 'NotImplemented': NotImplemented, 'ResourceWarning': <class 'ResourceWarning'>, 'filter': <class 'filter'>, 'BlockingIOError': <class 'BlockingIOError'>, 'int': <class 'int'>, 'BufferError': <class 'BufferError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'oct': <built-in function oct>, 'issubclass': <built-in function issubclass>, 'staticmethod': <class 'staticmethod'>, 'callable': <built-in function callable>, 'print': <built-in function print>, 'ascii': <built-in function ascii>, 'dir': <built-in function dir>, 'sum': <built-in function sum>, 'setattr': <built-in function setattr>, 'all': <built-in function all>, 'StopIteration': <class 'StopIteration'>, 'repr': <built-in function repr>, '__name__': 'builtins', 'iter': <built-in function iter>, 'license': Type license() to see the full license text}
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x100228680>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_channel.py'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py' lenresult=9 outcome='passed'> [hook]
    genitems <Class 'TestJOIN'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestJOIN'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestJOIN'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestJOIN' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestJOIN' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_join5
            obj: <function TestJOIN.test_join5 at 0x10351d6a8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103540390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_join5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_join4
            obj: <function TestJOIN.test_join4 at 0x10351d840>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103540550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_join4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_join1
            obj: <function TestJOIN.test_join1 at 0x10351d730>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103540748>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_join1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestJOIN' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_join2
            obj: <function TestJOIN.test_join2 at 0x10351d620>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035409b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_join2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('CHANNEL_JOIN',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_channel
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_join3
            obj: <function TestJOIN.test_join3 at 0x10351d7b8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103540c88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_join3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestJOIN::()' lenresult=5 outcome='passed'> [hook]
    genitems <Function 'test_join1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_join1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_join2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_join2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_join3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_join3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_join4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_join4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_join5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_join5'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestJOIN::()' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestJOIN' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestChannelPRIVMSG'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestChannelPRIVMSG'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestChannelPRIVMSG'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestChannelPRIVMSG' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_privmsg2
            obj: <function TestChannelPRIVMSG.test_channel_privmsg2 at 0x10351d9d8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355e748>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_privmsg2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_privmsg_nochannel
            obj: <function TestChannelPRIVMSG.test_channel_privmsg_nochannel at 0x10351dae8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355e978>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_privmsg_nochannel'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_channel
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_privmsg3
            obj: <function TestChannelPRIVMSG.test_channel_privmsg3 at 0x10351da60>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103540e80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_privmsg3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_privmsg1
            obj: <function TestChannelPRIVMSG.test_channel_privmsg1 at 0x10351d950>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035409b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_privmsg1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_privmsg_notonchannel
            obj: <function TestChannelPRIVMSG.test_channel_privmsg_notonchannel at 0x10351db70>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035403c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_privmsg_notonchannel'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('CHANNEL_PRIVMSG_NOTICE',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestChannelPRIVMSG' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_join_and_privmsg
            obj: <function TestChannelPRIVMSG._test_join_and_privmsg at 0x10351d8c8>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()' lenresult=5 outcome='passed'> [hook]
    genitems <Function 'test_channel_privmsg1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_privmsg1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_privmsg2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_privmsg2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_privmsg3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_privmsg3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_privmsg_nochannel'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_privmsg_nochannel'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_privmsg_notonchannel'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_privmsg_notonchannel'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestChannelNOTICE'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestChannelNOTICE'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestChannelNOTICE'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestChannelNOTICE' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestChannelNOTICE' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_notice_nochannel
            obj: <function TestChannelNOTICE.test_channel_notice_nochannel at 0x10351dbf8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355e470>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_notice_nochannel'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('CHANNEL_PRIVMSG_NOTICE',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_channel
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE::()' lenresult=1 outcome='passed'> [hook]
    genitems <Function 'test_channel_notice_nochannel'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_notice_nochannel'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE::()' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestPART'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestPART'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestPART'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestPART' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestPART' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_join_and_part_and_join_and_part
            obj: <function TestPART._test_join_and_part_and_join_and_part at 0x10351dd08>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part2
            obj: <function TestPART.test_channel_part2 at 0x10351de18>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103565208>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part5
            obj: <function TestPART.test_channel_part5 at 0x103537048>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103565438>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part7
            obj: <function TestPART.test_channel_part7 at 0x103537158>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103565668>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part7'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part_notonchannel1
            obj: <function TestPART.test_channel_part_notonchannel1 at 0x103537400>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103565898>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part_notonchannel1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_channel
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part_notonchannel2
            obj: <function TestPART.test_channel_part_notonchannel2 at 0x103537488>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103565b00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part_notonchannel2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part6
            obj: <function TestPART.test_channel_part6 at 0x1035370d0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103565d30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part1
            obj: <function TestPART.test_channel_part1 at 0x10351dd90>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103532cc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part9
            obj: <function TestPART.test_channel_part9 at 0x103537268>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355ecc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part9'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part3
            obj: <function TestPART.test_channel_part3 at 0x10351dea0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355ea90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestPART' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part8
            obj: <function TestPART.test_channel_part8 at 0x1035371e0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355e748>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part8'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part_nochannel1
            obj: <function TestPART.test_channel_part_nochannel1 at 0x1035372f0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10351f048>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part_nochannel1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('CHANNEL_PART',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part_nochannel2
            obj: <function TestPART.test_channel_part_nochannel2 at 0x103537378>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103519eb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part_nochannel2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_join_and_part
            obj: <function TestPART._test_join_and_part at 0x10351dc80>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_part4
            obj: <function TestPART.test_channel_part4 at 0x10351df28>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103519a58>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_part4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestPART::()' lenresult=13 outcome='passed'> [hook]
    genitems <Function 'test_channel_part1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part6'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part7'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part7'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part8'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part8'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part9'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part9'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part_nochannel1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part_nochannel1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part_nochannel2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part_nochannel2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part_notonchannel1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part_notonchannel1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_part_notonchannel2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_part_notonchannel2'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestPART::()' lenresult=13 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestPART' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestTOPIC'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestTOPIC'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestTOPIC'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestTOPIC' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: test_topic7
            obj: <function TestTOPIC.test_topic7 at 0x103537840>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355d208>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic7'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestTOPIC' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_topic6
            obj: <function TestTOPIC.test_topic6 at 0x1035377b8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355d470>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_topic5
            obj: <function TestTOPIC.test_topic5 at 0x103537730>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355d6a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_topic3
            obj: <function TestTOPIC.test_topic3 at 0x103537620>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355d8d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('CHANNEL_TOPIC',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_channel
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestTOPIC' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_topic4
            obj: <function TestTOPIC.test_topic4 at 0x1035376a8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355dbe0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_topic9
            obj: <function TestTOPIC.test_topic9 at 0x103537950>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355de10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic9'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_topic2
            obj: <function TestTOPIC.test_topic2 at 0x103537598>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356e080>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_topic1
            obj: <function TestTOPIC.test_topic1 at 0x103537510>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355de48>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_topic10
            obj: <function TestTOPIC.test_topic10 at 0x1035379d8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355d5c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic10'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_topic8
            obj: <function TestTOPIC.test_topic8 at 0x1035378c8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355d0b8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_topic8'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()' lenresult=10 outcome='passed'> [hook]
    genitems <Function 'test_topic1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_topic2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_topic3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_topic4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_topic5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_topic6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic6'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_topic7'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic7'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_topic8'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic8'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_topic9'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic9'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_topic10'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_topic10'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()' lenresult=10 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestTOPIC' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestNAMES'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestNAMES'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestNAMES'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestNAMES' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: test_names10
            obj: <function TestNAMES.test_names10 at 0x10353a0d0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355e748>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names10'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestNAMES' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names6
            obj: <function TestNAMES.test_names6 at 0x103537e18>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103532cc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names4
            obj: <function TestNAMES.test_names4 at 0x103537d08>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356e358>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names9
            obj: <function TestNAMES.test_names9 at 0x10353a048>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356e588>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names9'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names5
            obj: <function TestNAMES.test_names5 at 0x103537d90>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356e7b8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names8
            obj: <function TestNAMES.test_names8 at 0x103537f28>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356e9e8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names8'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_names_channel
            obj: <function TestNAMES._test_names_channel at 0x103537a60>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names11
            obj: <function TestNAMES.test_names11 at 0x10353a158>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356ec88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names11'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_names_all
            obj: <function TestNAMES._test_names_all at 0x103537ae8>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names3
            obj: <function TestNAMES.test_names3 at 0x103537c80>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356eef0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names7
            obj: <function TestNAMES.test_names7 at 0x103537ea0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103571160>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names7'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('NAMES',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestNAMES' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names2
            obj: <function TestNAMES.test_names2 at 0x103537bf8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103571400>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_channel
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_names1
            obj: <function TestNAMES.test_names1 at 0x103537b70>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103571668>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_names1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestNAMES::()' lenresult=11 outcome='passed'> [hook]
    genitems <Function 'test_names1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names6'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names7'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names7'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names8'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names8'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names9'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names9'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names10'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names10'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_names11'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_names11'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestNAMES::()' lenresult=11 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestNAMES' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestLIST'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestLIST'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestLIST'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestLIST' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestLIST' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_list3
            obj: <function TestLIST.test_list3 at 0x10353a378>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103540fd0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_list3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_list1
            obj: <function TestLIST.test_list1 at 0x10353a268>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103565c50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_list1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_list2
            obj: <function TestLIST.test_list2 at 0x10353a2f0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103565048>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_list2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_list5
            obj: <function TestLIST.test_list5 at 0x10353a488>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355de48>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_list5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_list4
            obj: <function TestLIST.test_list4 at 0x10353a400>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035716a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_list4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestLIST' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('LIST',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_channel
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_list
            obj: <function TestLIST._test_list at 0x10353a1e0>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestLIST::()' lenresult=5 outcome='passed'> [hook]
    genitems <Function 'test_list1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_list1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_list2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_list2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_list3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_list3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_list4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_list4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_list5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_list5'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestLIST::()' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestLIST' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestWHO'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestWHO'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestWHO'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestWHO' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestWHO' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_who5
            obj: <function TestWHO.test_who5 at 0x10353a7b8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10357b320>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_who5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_who4
            obj: <function TestWHO.test_who4 at 0x10353a730>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10357b550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_who4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestWHO' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_who2
            obj: <function TestWHO.test_who2 at 0x10353a620>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10357b7b8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_who2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('WHO',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_who3
            obj: <function TestWHO.test_who3 at 0x10353a6a8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10357ba20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_who3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_who6
            obj: <function TestWHO.test_who6 at 0x10353a840>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10357bc50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_who6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_channel
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_who1
            obj: <function TestWHO.test_who1 at 0x10353a598>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103571e10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_who1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_who
            obj: <function TestWHO._test_who at 0x10353a510>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestWHO::()' lenresult=6 outcome='passed'> [hook]
    genitems <Function 'test_who1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_who1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_who2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_who2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_who3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_who3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_who4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_who4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_who5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_who5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_who6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_who6'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestWHO::()' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestWHO' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestChannelUPDATE1b'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestChannelUPDATE1b'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestChannelUPDATE1b'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: test_update1b_quit1
            obj: <function TestChannelUPDATE1b.test_update1b_quit1 at 0x10353a950>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355eef0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_update1b_quit1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestChannelUPDATE1b' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_update1b_nick
            obj: <function TestChannelUPDATE1b.test_update1b_nick at 0x10353a8c8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356e358>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_update1b_nick'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('UPDATE_1B',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestChannelUPDATE1b' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_update1b_quit2
            obj: <function TestChannelUPDATE1b.test_update1b_quit2 at 0x10353a9d8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356eba8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_update1b_quit2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_channel
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()' lenresult=3 outcome='passed'> [hook]
    genitems <Function 'test_update1b_nick'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_update1b_nick'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_update1b_quit1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_update1b_quit1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_update1b_quit2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_update1b_quit2'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_channel.py' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'tests/chirc/tests/test_connection.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'tests/chirc/tests/test_connection.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'tests/chirc/tests/test_connection.py'>
      find_module called for: chirc.tests.test_connection [assertion]
      matched test file '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_connection.py' [assertion]
      found cached rewritten pyc for '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_connection.py' [assertion]
        pytest_pycollect_makeitem [hook]
            name: TestFullConnection
            obj: <class 'chirc.tests.test_connection.TestFullConnection'>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestFullConnection'> [hook]
        pytest_pycollect_makeitem [hook]
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __name__
            obj: chirc.tests.test_connection
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: ReplyTimeoutException
            obj: <class 'chirc.types.ReplyTimeoutException'>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __cached__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_connection.cpython-35-PYTEST.pyc
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/rewrite.py'>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __spec__
            obj: ModuleSpec(name='chirc.tests.test_connection', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: replies
            obj: <module 'chirc.replies' from '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/replies.py'>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __file__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_connection.py
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestMultiuserConnection
            obj: <class 'chirc.tests.test_connection.TestMultiuserConnection'>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestMultiuserConnection'> [hook]
        pytest_pycollect_makeitem [hook]
            name: TestBasicConnection
            obj: <class 'chirc.tests.test_connection.TestBasicConnection'>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestBasicConnection'> [hook]
        pytest_pycollect_makeitem [hook]
            name: pytest
            obj: <module 'pytest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytest.py'>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __package__
            obj: chirc.tests
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __builtins__
            obj: {'hash': <built-in function hash>, 'hasattr': <built-in function hasattr>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'IndentationError': <class 'IndentationError'>, 'len': <built-in function len>, 'IndexError': <class 'IndexError'>, 'complex': <class 'complex'>, 'id': <built-in function id>, 'OverflowError': <class 'OverflowError'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'bin': <built-in function bin>, '__build_class__': <built-in function __build_class__>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'SystemExit': <class 'SystemExit'>, 'TimeoutError': <class 'TimeoutError'>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'IsADirectoryError': <class 'IsADirectoryError'>, 'EOFError': <class 'EOFError'>, 'NameError': <class 'NameError'>, 'round': <built-in function round>, 'RuntimeError': <class 'RuntimeError'>, 'compile': <built-in function compile>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'vars': <built-in function vars>, 'MemoryError': <class 'MemoryError'>, 'True': True, 'ValueError': <class 'ValueError'>, 'pow': <built-in function pow>, 'AttributeError': <class 'AttributeError'>, 'classmethod': <class 'classmethod'>, 'FloatingPointError': <class 'FloatingPointError'>, 'max': <built-in function max>, 'UnicodeError': <class 'UnicodeError'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'format': <built-in function format>, 'frozenset': <class 'frozenset'>, 'sorted': <built-in function sorted>, 'eval': <built-in function eval>, 'SyntaxError': <class 'SyntaxError'>, '__import__': <built-in function __import__>, 'dict': <class 'dict'>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'ProcessLookupError': <class 'ProcessLookupError'>, 'any': <built-in function any>, 'type': <class 'type'>, 'memoryview': <class 'memoryview'>, 'open': <built-in function open>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'float': <class 'float'>, 'BytesWarning': <class 'BytesWarning'>, 'copyright': Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'help': Type help() for interactive help, or help(object) for help about object., 'IOError': <class 'OSError'>, 'TypeError': <class 'TypeError'>, 'ImportWarning': <class 'ImportWarning'>, 'abs': <built-in function abs>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 'set': <class 'set'>, 'None': None, 'LookupError': <class 'LookupError'>, 'str': <class 'str'>, 'exec': <built-in function exec>, 'super': <class 'super'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'enumerate': <class 'enumerate'>, 'tuple': <class 'tuple'>, 'RecursionError': <class 'RecursionError'>, 'FutureWarning': <class 'FutureWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'hex': <built-in function hex>, 'zip': <class 'zip'>, 'slice': <class 'slice'>, 'list': <class 'list'>, 'bool': <class 'bool'>, 'Exception': <class 'Exception'>, 'OSError': <class 'OSError'>, 'globals': <built-in function globals>, 'NotImplementedError': <class 'NotImplementedError'>, 'GeneratorExit': <class 'GeneratorExit'>, 'getattr': <built-in function getattr>, 'SystemError': <class 'SystemError'>, 'Warning': <class 'Warning'>, 'ArithmeticError': <class 'ArithmeticError'>, 'BaseException': <class 'BaseException'>, 'next': <built-in function next>, 'PermissionError': <class 'PermissionError'>, 'map': <class 'map'>, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'AssertionError': <class 'AssertionError'>, 'InterruptedError': <class 'InterruptedError'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'KeyError': <class 'KeyError'>, 'ReferenceError': <class 'ReferenceError'>, '__package__': '', 'ord': <built-in function ord>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'EnvironmentError': <class 'OSError'>, 'delattr': <built-in function delattr>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'UserWarning': <class 'UserWarning'>, 'ChildProcessError': <class 'ChildProcessError'>, '__debug__': True, 'bytearray': <class 'bytearray'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'isinstance': <built-in function isinstance>, 'divmod': <built-in function divmod>, 'input': <built-in function input>, 'ImportError': <class 'ImportError'>, 'chr': <built-in function chr>, 'Ellipsis': Ellipsis, 'False': False, 'RuntimeWarning': <class 'RuntimeWarning'>, 'TabError': <class 'TabError'>, 'min': <built-in function min>, 'property': <class 'property'>, 'FileExistsError': <class 'FileExistsError'>, 'bytes': <class 'bytes'>, 'locals': <built-in function locals>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'object': <class 'object'>, 'NotImplemented': NotImplemented, 'ResourceWarning': <class 'ResourceWarning'>, 'filter': <class 'filter'>, 'BlockingIOError': <class 'BlockingIOError'>, 'int': <class 'int'>, 'BufferError': <class 'BufferError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'oct': <built-in function oct>, 'issubclass': <built-in function issubclass>, 'staticmethod': <class 'staticmethod'>, 'callable': <built-in function callable>, 'print': <built-in function print>, 'ascii': <built-in function ascii>, 'dir': <built-in function dir>, 'sum': <built-in function sum>, 'setattr': <built-in function setattr>, 'all': <built-in function all>, 'StopIteration': <class 'StopIteration'>, 'repr': <built-in function repr>, '__name__': 'builtins', 'iter': <built-in function iter>, 'license': Type license() to see the full license text}
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x100228680>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_connection.py'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_connection.py' lenresult=3 outcome='passed'> [hook]
    genitems <Class 'TestBasicConnection'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestBasicConnection'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestBasicConnection'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_connection.py::TestBasicConnection' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: test_connect_nick_user_parsing2
            obj: <function TestBasicConnection.test_connect_nick_user_parsing2 at 0x1035629d8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10357be48>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_nick_user_parsing2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_no_unexpected_welcome1
            obj: <function TestBasicConnection.test_connect_no_unexpected_welcome1 at 0x103562ae8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10356e240>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_no_unexpected_welcome1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_partitioned_messages7
            obj: <function TestBasicConnection.test_connect_partitioned_messages7 at 0x1035628c8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355eef0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_partitioned_messages7'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_nick_user_parsing1
            obj: <function TestBasicConnection.test_connect_nick_user_parsing1 at 0x103562950>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10355da20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_nick_user_parsing1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_partitioned_messages6
            obj: <function TestBasicConnection.test_connect_partitioned_messages6 at 0x103562840>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103571c50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_partitioned_messages6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_partitioned_messages2
            obj: <function TestBasicConnection.test_connect_partitioned_messages2 at 0x103562620>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103571940>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_partitioned_messages2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_simple
            obj: <function TestBasicConnection.test_connect_simple at 0x103562488>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103571b70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_simple'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_partitioned_messages1
            obj: <function TestBasicConnection.test_connect_partitioned_messages1 at 0x103562598>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103577080>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_partitioned_messages1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestBasicConnection' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('BASIC_CONNECTION',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_partitioned_messages4
            obj: <function TestBasicConnection.test_connect_partitioned_messages4 at 0x103562730>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103577c50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_partitioned_messages4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_connection
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestBasicConnection' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_both_messages_at_once
            obj: <function TestBasicConnection.test_connect_both_messages_at_once at 0x103562510>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035779b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_both_messages_at_once'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_no_unexpected_welcome2
            obj: <function TestBasicConnection.test_connect_no_unexpected_welcome2 at 0x103562b70>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035775f8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_no_unexpected_welcome2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_partitioned_messages5
            obj: <function TestBasicConnection.test_connect_partitioned_messages5 at 0x1035627b8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103590080>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_partitioned_messages5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_no_unexpected_welcome3
            obj: <function TestBasicConnection.test_connect_no_unexpected_welcome3 at 0x103562bf8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035902b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_no_unexpected_welcome3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_partitioned_messages3
            obj: <function TestBasicConnection.test_connect_partitioned_messages3 at 0x1035626a8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035904e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_partitioned_messages3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_nick_user_parsing3
            obj: <function TestBasicConnection.test_connect_nick_user_parsing3 at 0x103562a60>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103590710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_nick_user_parsing3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()' lenresult=15 outcome='passed'> [hook]
    genitems <Function 'test_connect_simple'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_simple'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_both_messages_at_once'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_both_messages_at_once'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_partitioned_messages1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_partitioned_messages1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_partitioned_messages2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_partitioned_messages2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_partitioned_messages3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_partitioned_messages3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_partitioned_messages4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_partitioned_messages4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_partitioned_messages5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_partitioned_messages5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_partitioned_messages6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_partitioned_messages6'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_partitioned_messages7'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_partitioned_messages7'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_nick_user_parsing1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_nick_user_parsing1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_nick_user_parsing2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_nick_user_parsing2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_nick_user_parsing3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_nick_user_parsing3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_no_unexpected_welcome1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_no_unexpected_welcome1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_no_unexpected_welcome2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_no_unexpected_welcome2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_no_unexpected_welcome3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_no_unexpected_welcome3'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()' lenresult=15 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_connection.py::TestBasicConnection' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestFullConnection'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestFullConnection'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestFullConnection'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_connection.py::TestFullConnection' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestFullConnection' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_full3
            obj: <function TestFullConnection.test_connect_full3 at 0x103562d90>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103571b70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_full3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestFullConnection' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('CONNECTION_REGISTRATION',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_full1
            obj: <function TestFullConnection.test_connect_full1 at 0x103562c80>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103565c50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_full1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_full2
            obj: <function TestFullConnection.test_connect_full2 at 0x103562d08>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035400b8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_full2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_connection
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()' lenresult=3 outcome='passed'> [hook]
    genitems <Function 'test_connect_full1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_full1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_full2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_full2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_full3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_full3'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_connection.py::TestFullConnection' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestMultiuserConnection'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestMultiuserConnection'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestMultiuserConnection'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestMultiuserConnection' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestMultiuserConnection' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('CONNECTION_REGISTRATION',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_duplicate_nick
            obj: <function TestMultiuserConnection.test_connect_duplicate_nick at 0x103562ea0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103590f28>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_duplicate_nick'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_connection
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_2users
            obj: <function TestMultiuserConnection.test_connect_2users at 0x103562e18>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10358f1d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_2users'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()' lenresult=2 outcome='passed'> [hook]
    genitems <Function 'test_connect_2users'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_2users'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_duplicate_nick'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_duplicate_nick'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_connection.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'tests/chirc/tests/test_lusers_motd.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
      find_module called for: chirc.tests.test_lusers_motd [assertion]
      matched test file '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_lusers_motd.py' [assertion]
      found cached rewritten pyc for '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_lusers_motd.py' [assertion]
        pytest_pycollect_makeitem [hook]
            name: TestLUSERS
            obj: <class 'chirc.tests.test_lusers_motd.TestLUSERS'>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestLUSERS'> [hook]
        pytest_pycollect_makeitem [hook]
            name: TestConnectionWithLUSERSMOTD
            obj: <class 'chirc.tests.test_lusers_motd.TestConnectionWithLUSERSMOTD'>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestConnectionWithLUSERSMOTD'> [hook]
        pytest_pycollect_makeitem [hook]
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __name__
            obj: chirc.tests.test_lusers_motd
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __cached__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_lusers_motd.cpython-35-PYTEST.pyc
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/rewrite.py'>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __spec__
            obj: ModuleSpec(name='chirc.tests.test_lusers_motd', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestMOTD
            obj: <class 'chirc.tests.test_lusers_motd.TestMOTD'>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestMOTD'> [hook]
        pytest_pycollect_makeitem [hook]
            name: __file__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_lusers_motd.py
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: time
            obj: <module 'time' (built-in)>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytest
            obj: <module 'pytest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytest.py'>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __package__
            obj: chirc.tests
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __builtins__
            obj: {'hash': <built-in function hash>, 'hasattr': <built-in function hasattr>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'IndentationError': <class 'IndentationError'>, 'len': <built-in function len>, 'IndexError': <class 'IndexError'>, 'complex': <class 'complex'>, 'id': <built-in function id>, 'OverflowError': <class 'OverflowError'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'bin': <built-in function bin>, '__build_class__': <built-in function __build_class__>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'SystemExit': <class 'SystemExit'>, 'TimeoutError': <class 'TimeoutError'>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'IsADirectoryError': <class 'IsADirectoryError'>, 'EOFError': <class 'EOFError'>, 'NameError': <class 'NameError'>, 'round': <built-in function round>, 'RuntimeError': <class 'RuntimeError'>, 'compile': <built-in function compile>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'vars': <built-in function vars>, 'MemoryError': <class 'MemoryError'>, 'True': True, 'ValueError': <class 'ValueError'>, 'pow': <built-in function pow>, 'AttributeError': <class 'AttributeError'>, 'classmethod': <class 'classmethod'>, 'FloatingPointError': <class 'FloatingPointError'>, 'max': <built-in function max>, 'UnicodeError': <class 'UnicodeError'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'format': <built-in function format>, 'frozenset': <class 'frozenset'>, 'sorted': <built-in function sorted>, 'eval': <built-in function eval>, 'SyntaxError': <class 'SyntaxError'>, '__import__': <built-in function __import__>, 'dict': <class 'dict'>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'ProcessLookupError': <class 'ProcessLookupError'>, 'any': <built-in function any>, 'type': <class 'type'>, 'memoryview': <class 'memoryview'>, 'open': <built-in function open>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'float': <class 'float'>, 'BytesWarning': <class 'BytesWarning'>, 'copyright': Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'help': Type help() for interactive help, or help(object) for help about object., 'IOError': <class 'OSError'>, 'TypeError': <class 'TypeError'>, 'ImportWarning': <class 'ImportWarning'>, 'abs': <built-in function abs>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 'set': <class 'set'>, 'None': None, 'LookupError': <class 'LookupError'>, 'str': <class 'str'>, 'exec': <built-in function exec>, 'super': <class 'super'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'enumerate': <class 'enumerate'>, 'tuple': <class 'tuple'>, 'RecursionError': <class 'RecursionError'>, 'FutureWarning': <class 'FutureWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'hex': <built-in function hex>, 'zip': <class 'zip'>, 'slice': <class 'slice'>, 'list': <class 'list'>, 'bool': <class 'bool'>, 'Exception': <class 'Exception'>, 'OSError': <class 'OSError'>, 'globals': <built-in function globals>, 'NotImplementedError': <class 'NotImplementedError'>, 'GeneratorExit': <class 'GeneratorExit'>, 'getattr': <built-in function getattr>, 'SystemError': <class 'SystemError'>, 'Warning': <class 'Warning'>, 'ArithmeticError': <class 'ArithmeticError'>, 'BaseException': <class 'BaseException'>, 'next': <built-in function next>, 'PermissionError': <class 'PermissionError'>, 'map': <class 'map'>, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'AssertionError': <class 'AssertionError'>, 'InterruptedError': <class 'InterruptedError'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'KeyError': <class 'KeyError'>, 'ReferenceError': <class 'ReferenceError'>, '__package__': '', 'ord': <built-in function ord>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'EnvironmentError': <class 'OSError'>, 'delattr': <built-in function delattr>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'UserWarning': <class 'UserWarning'>, 'ChildProcessError': <class 'ChildProcessError'>, '__debug__': True, 'bytearray': <class 'bytearray'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'isinstance': <built-in function isinstance>, 'divmod': <built-in function divmod>, 'input': <built-in function input>, 'ImportError': <class 'ImportError'>, 'chr': <built-in function chr>, 'Ellipsis': Ellipsis, 'False': False, 'RuntimeWarning': <class 'RuntimeWarning'>, 'TabError': <class 'TabError'>, 'min': <built-in function min>, 'property': <class 'property'>, 'FileExistsError': <class 'FileExistsError'>, 'bytes': <class 'bytes'>, 'locals': <built-in function locals>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'object': <class 'object'>, 'NotImplemented': NotImplemented, 'ResourceWarning': <class 'ResourceWarning'>, 'filter': <class 'filter'>, 'BlockingIOError': <class 'BlockingIOError'>, 'int': <class 'int'>, 'BufferError': <class 'BufferError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'oct': <built-in function oct>, 'issubclass': <built-in function issubclass>, 'staticmethod': <class 'staticmethod'>, 'callable': <built-in function callable>, 'print': <built-in function print>, 'ascii': <built-in function ascii>, 'dir': <built-in function dir>, 'sum': <built-in function sum>, 'setattr': <built-in function setattr>, 'all': <built-in function all>, 'StopIteration': <class 'StopIteration'>, 'repr': <built-in function repr>, '__name__': 'builtins', 'iter': <built-in function iter>, 'license': Type license() to see the full license text}
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x100228680>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_lusers_motd.py'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_lusers_motd.py' lenresult=3 outcome='passed'> [hook]
    genitems <Class 'TestConnectionWithLUSERSMOTD'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestConnectionWithLUSERSMOTD'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestConnectionWithLUSERSMOTD'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestConnectionWithLUSERSMOTD' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_lusers_motd2
            obj: <function TestConnectionWithLUSERSMOTD.test_connect_lusers_motd2 at 0x103586488>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10357b908>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_lusers_motd2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('LUSERS',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_lusers_motd_unknown2
            obj: <function TestConnectionWithLUSERSMOTD.test_connect_lusers_motd_unknown2 at 0x103586620>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103577e80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_lusers_motd_unknown2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_lusers_motd1
            obj: <function TestConnectionWithLUSERSMOTD.test_connect_lusers_motd1 at 0x103586400>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103577f60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_lusers_motd1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_lusers_motd_unknown
            obj: <function TestConnectionWithLUSERSMOTD.test_connect_lusers_motd_unknown at 0x103586598>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10358feb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_lusers_motd_unknown'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestConnectionWithLUSERSMOTD' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_lusers_motd_2users
            obj: <function TestConnectionWithLUSERSMOTD.test_connect_lusers_motd_2users at 0x103586510>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10358f6a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_lusers_motd_2users'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_lusers_motd_unknown3
            obj: <function TestConnectionWithLUSERSMOTD.test_connect_lusers_motd_unknown3 at 0x1035866a8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10358f470>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_lusers_motd_unknown3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_lusers_motd
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()' lenresult=6 outcome='passed'> [hook]
    genitems <Function 'test_connect_lusers_motd1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_lusers_motd1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_lusers_motd2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_lusers_motd2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_lusers_motd_2users'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_lusers_motd_2users'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_lusers_motd_unknown'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_lusers_motd_unknown'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_lusers_motd_unknown2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_lusers_motd_unknown2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_lusers_motd_unknown3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_lusers_motd_unknown3'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestLUSERS'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestLUSERS'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestLUSERS'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestLUSERS' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestLUSERS' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_lusers
            obj: <function TestLUSERS.test_lusers at 0x103586730>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035a08d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_lusers'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('LUSERS',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_lusers_motd
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()' lenresult=1 outcome='passed'> [hook]
    genitems <Function 'test_lusers'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_lusers'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestMOTD'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestMOTD'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestMOTD'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestMOTD' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestMOTD' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_motd2
            obj: <function TestMOTD.test_motd2 at 0x103586840>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10357b208>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_motd2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('MOTD',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_lusers_motd
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_motd1
            obj: <function TestMOTD.test_motd1 at 0x1035867b8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103590da0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_motd1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()' lenresult=2 outcome='passed'> [hook]
    genitems <Function 'test_motd1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_motd1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_motd2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_motd2'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_lusers_motd.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'tests/chirc/tests/test_modes.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'tests/chirc/tests/test_modes.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'tests/chirc/tests/test_modes.py'>
      find_module called for: chirc.tests.test_modes [assertion]
      matched test file '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_modes.py' [assertion]
      found cached rewritten pyc for '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_modes.py' [assertion]
        pytest_pycollect_makeitem [hook]
            name: channels3
            obj: {'#test1': ('@user1', 'user2', 'user3'), '#test5': ('@user1', '@user5'), '#test3': ('@user3', '@user4', 'user5', 'user6'), '#test4': ('@user7', '+user8', '+user9', 'user1', 'user2'), '#test2': ('@user2',), None: ('user10', 'user11')}
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __name__
            obj: chirc.tests.test_modes
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestOPER
            obj: <class 'chirc.tests.test_modes.TestOPER'>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestOPER'> [hook]
        pytest_pycollect_makeitem [hook]
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: ReplyTimeoutException
            obj: <class 'chirc.types.ReplyTimeoutException'>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestAWAY
            obj: <class 'chirc.tests.test_modes.TestAWAY'>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestAWAY'> [hook]
        pytest_pycollect_makeitem [hook]
            name: channels2
            obj: {'#test1': ('@user1', 'user2', 'user3'), None: ('user10', 'user11'), '#test2': ('@user4', 'user5', 'user6'), '#test3': ('@user7', 'user8', 'user9')}
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __cached__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_modes.cpython-35-PYTEST.pyc
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestPermissions
            obj: <class 'chirc.tests.test_modes.TestPermissions'>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestPermissions'> [hook]
        pytest_pycollect_makeitem [hook]
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/rewrite.py'>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __spec__
            obj: ModuleSpec(name='chirc.tests.test_modes', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: replies
            obj: <module 'chirc.replies' from '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/replies.py'>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __file__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_modes.py
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: channels1
            obj: {'#test1': ('@user1', 'user2', 'user3'), '#test2': ('@user4', 'user5', 'user6'), '#test3': ('@user7', 'user8', 'user9')}
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestMODE
            obj: <class 'chirc.tests.test_modes.TestMODE'>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestMODE'> [hook]
        pytest_pycollect_makeitem [hook]
            name: pytest
            obj: <module 'pytest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytest.py'>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __package__
            obj: chirc.tests
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __builtins__
            obj: {'hash': <built-in function hash>, 'hasattr': <built-in function hasattr>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'IndentationError': <class 'IndentationError'>, 'len': <built-in function len>, 'IndexError': <class 'IndexError'>, 'complex': <class 'complex'>, 'id': <built-in function id>, 'OverflowError': <class 'OverflowError'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'bin': <built-in function bin>, '__build_class__': <built-in function __build_class__>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'SystemExit': <class 'SystemExit'>, 'TimeoutError': <class 'TimeoutError'>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'IsADirectoryError': <class 'IsADirectoryError'>, 'EOFError': <class 'EOFError'>, 'NameError': <class 'NameError'>, 'round': <built-in function round>, 'RuntimeError': <class 'RuntimeError'>, 'compile': <built-in function compile>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'vars': <built-in function vars>, 'MemoryError': <class 'MemoryError'>, 'True': True, 'ValueError': <class 'ValueError'>, 'pow': <built-in function pow>, 'AttributeError': <class 'AttributeError'>, 'classmethod': <class 'classmethod'>, 'FloatingPointError': <class 'FloatingPointError'>, 'max': <built-in function max>, 'UnicodeError': <class 'UnicodeError'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'format': <built-in function format>, 'frozenset': <class 'frozenset'>, 'sorted': <built-in function sorted>, 'eval': <built-in function eval>, 'SyntaxError': <class 'SyntaxError'>, '__import__': <built-in function __import__>, 'dict': <class 'dict'>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'ProcessLookupError': <class 'ProcessLookupError'>, 'any': <built-in function any>, 'type': <class 'type'>, 'memoryview': <class 'memoryview'>, 'open': <built-in function open>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'float': <class 'float'>, 'BytesWarning': <class 'BytesWarning'>, 'copyright': Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'help': Type help() for interactive help, or help(object) for help about object., 'IOError': <class 'OSError'>, 'TypeError': <class 'TypeError'>, 'ImportWarning': <class 'ImportWarning'>, 'abs': <built-in function abs>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 'set': <class 'set'>, 'None': None, 'LookupError': <class 'LookupError'>, 'str': <class 'str'>, 'exec': <built-in function exec>, 'super': <class 'super'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'enumerate': <class 'enumerate'>, 'tuple': <class 'tuple'>, 'RecursionError': <class 'RecursionError'>, 'FutureWarning': <class 'FutureWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'hex': <built-in function hex>, 'zip': <class 'zip'>, 'slice': <class 'slice'>, 'list': <class 'list'>, 'bool': <class 'bool'>, 'Exception': <class 'Exception'>, 'OSError': <class 'OSError'>, 'globals': <built-in function globals>, 'NotImplementedError': <class 'NotImplementedError'>, 'GeneratorExit': <class 'GeneratorExit'>, 'getattr': <built-in function getattr>, 'SystemError': <class 'SystemError'>, 'Warning': <class 'Warning'>, 'ArithmeticError': <class 'ArithmeticError'>, 'BaseException': <class 'BaseException'>, 'next': <built-in function next>, 'PermissionError': <class 'PermissionError'>, 'map': <class 'map'>, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'AssertionError': <class 'AssertionError'>, 'InterruptedError': <class 'InterruptedError'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'KeyError': <class 'KeyError'>, 'ReferenceError': <class 'ReferenceError'>, '__package__': '', 'ord': <built-in function ord>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'EnvironmentError': <class 'OSError'>, 'delattr': <built-in function delattr>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'UserWarning': <class 'UserWarning'>, 'ChildProcessError': <class 'ChildProcessError'>, '__debug__': True, 'bytearray': <class 'bytearray'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'isinstance': <built-in function isinstance>, 'divmod': <built-in function divmod>, 'input': <built-in function input>, 'ImportError': <class 'ImportError'>, 'chr': <built-in function chr>, 'Ellipsis': Ellipsis, 'False': False, 'RuntimeWarning': <class 'RuntimeWarning'>, 'TabError': <class 'TabError'>, 'min': <built-in function min>, 'property': <class 'property'>, 'FileExistsError': <class 'FileExistsError'>, 'bytes': <class 'bytes'>, 'locals': <built-in function locals>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'object': <class 'object'>, 'NotImplemented': NotImplemented, 'ResourceWarning': <class 'ResourceWarning'>, 'filter': <class 'filter'>, 'BlockingIOError': <class 'BlockingIOError'>, 'int': <class 'int'>, 'BufferError': <class 'BufferError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'oct': <built-in function oct>, 'issubclass': <built-in function issubclass>, 'staticmethod': <class 'staticmethod'>, 'callable': <built-in function callable>, 'print': <built-in function print>, 'ascii': <built-in function ascii>, 'dir': <built-in function dir>, 'sum': <built-in function sum>, 'setattr': <built-in function setattr>, 'all': <built-in function all>, 'StopIteration': <class 'StopIteration'>, 'repr': <built-in function repr>, '__name__': 'builtins', 'iter': <built-in function iter>, 'license': Type license() to see the full license text}
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x100228680>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_modes.py'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_modes.py' lenresult=4 outcome='passed'> [hook]
    genitems <Class 'TestOPER'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestOPER'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestOPER'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_modes.py::TestOPER' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: test_oper1
            obj: <function TestOPER.test_oper1 at 0x1035860d0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103577780>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_oper1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestOPER' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_oper2
            obj: <function TestOPER.test_oper2 at 0x1035868c8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035a0588>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_oper2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('OPER',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestOPER' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_modes
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_modes.py::TestOPER::()' lenresult=2 outcome='passed'> [hook]
    genitems <Function 'test_oper1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_oper1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_oper2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_oper2'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_modes.py::TestOPER::()' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_modes.py::TestOPER' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestMODE'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestMODE'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestMODE'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_modes.py::TestMODE' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestMODE' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode10
            obj: <function TestMODE.test_channel_mode10 at 0x1035a9e18>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035aee10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode10'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode3
            obj: <function TestMODE.test_channel_mode3 at 0x1035a9a60>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c7080>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode9
            obj: <function TestMODE.test_user_mode9 at 0x1035a9730>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c72b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode9'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode1
            obj: <function TestMODE.test_channeluser_mode1 at 0x1035b0378>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c74e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode12
            obj: <function TestMODE.test_user_mode12 at 0x1035a98c8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c7748>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode12'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode5
            obj: <function TestMODE.test_channeluser_mode5 at 0x1035b0598>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c7978>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_modes
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode9
            obj: <function TestMODE.test_channeluser_mode9 at 0x1035b07b8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c7be0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode9'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode3
            obj: <function TestMODE.test_channeluser_mode3 at 0x1035b0488>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c7e10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode4
            obj: <function TestMODE.test_channeluser_mode4 at 0x1035b0510>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cb080>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode15
            obj: <function TestMODE.test_channel_mode15 at 0x1035b0158>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cb2b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode15'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode16
            obj: <function TestMODE.test_channel_mode16 at 0x1035b01e0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c7c18>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode16'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_channels1
            obj: <function TestMODE.test_connect_channels1 at 0x1035b08c8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c74e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_channels1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode8
            obj: <function TestMODE.test_channeluser_mode8 at 0x1035b0730>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035aef60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode8'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestMODE' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode2
            obj: <function TestMODE.test_channel_mode2 at 0x1035a99d8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035aeb70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode4
            obj: <function TestMODE.test_user_mode4 at 0x1035a9488>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035aedd8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode7
            obj: <function TestMODE.test_user_mode7 at 0x1035a9620>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x10358f898>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode7'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode11
            obj: <function TestMODE.test_channel_mode11 at 0x1035a9ea0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103590ba8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode11'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_channels3
            obj: <function TestMODE.test_connect_channels3 at 0x1035b09d8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103590908>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_channels3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode3
            obj: <function TestMODE.test_user_mode3 at 0x1035a9400>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cb438>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode10
            obj: <function TestMODE.test_channeluser_mode10 at 0x1035b0840>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cb668>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode10'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode6
            obj: <function TestMODE.test_user_mode6 at 0x1035a9598>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cb898>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode8
            obj: <function TestMODE.test_channel_mode8 at 0x1035a9d08>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cbac8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode8'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode2
            obj: <function TestMODE.test_user_mode2 at 0x1035a9378>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cbcf8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode2
            obj: <function TestMODE.test_channeluser_mode2 at 0x1035b0400>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cbf28>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode11
            obj: <function TestMODE.test_user_mode11 at 0x1035a9840>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cd198>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode11'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode6
            obj: <function TestMODE.test_channeluser_mode6 at 0x1035b0620>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cd3c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('MODES',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode10
            obj: <function TestMODE.test_user_mode10 at 0x1035a97b8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cd630>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode10'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode8
            obj: <function TestMODE.test_user_mode8 at 0x1035a96a8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cd860>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode8'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode4
            obj: <function TestMODE.test_channel_mode4 at 0x1035a9ae8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cda90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode9
            obj: <function TestMODE.test_channel_mode9 at 0x1035a9d90>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cbe48>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode9'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode18
            obj: <function TestMODE.test_channel_mode18 at 0x1035b02f0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cb6a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode18'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode5
            obj: <function TestMODE.test_user_mode5 at 0x1035a9510>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103577f60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode5
            obj: <function TestMODE.test_channel_mode5 at 0x1035a9b70>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035aef60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode6
            obj: <function TestMODE.test_channel_mode6 at 0x1035a9bf8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c71d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode13
            obj: <function TestMODE.test_channel_mode13 at 0x1035b0048>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cd668>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode13'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode1
            obj: <function TestMODE.test_channel_mode1 at 0x1035a9950>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cdcf8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode7
            obj: <function TestMODE.test_channel_mode7 at 0x1035a9c80>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cdf28>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode7'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode12
            obj: <function TestMODE.test_channel_mode12 at 0x1035a9f28>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035d7198>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode12'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode17
            obj: <function TestMODE.test_channel_mode17 at 0x1035b0268>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035d73c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode17'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_connect_channels2
            obj: <function TestMODE.test_connect_channels2 at 0x1035b0950>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035d75f8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_connect_channels2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channeluser_mode7
            obj: <function TestMODE.test_channeluser_mode7 at 0x1035b06a8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035d7828>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channeluser_mode7'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_user_mode1
            obj: <function TestMODE.test_user_mode1 at 0x1035a92f0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035d7a58>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_user_mode1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_channel_mode14
            obj: <function TestMODE.test_channel_mode14 at 0x1035b00d0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035d7c88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_channel_mode14'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_modes.py::TestMODE::()' lenresult=43 outcome='passed'> [hook]
    genitems <Function 'test_user_mode1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode6'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode7'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode7'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode8'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode8'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode9'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode9'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode10'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode10'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode11'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode11'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_user_mode12'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_user_mode12'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode6'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode7'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode7'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode8'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode8'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode9'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode9'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode10'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode10'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode11'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode11'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode12'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode12'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode13'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode13'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode14'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode14'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode15'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode15'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode16'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode16'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode17'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode17'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channel_mode18'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channel_mode18'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode6'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode7'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode7'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode8'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode8'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode9'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode9'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_channeluser_mode10'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_channeluser_mode10'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_channels1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_channels1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_channels2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_channels2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_connect_channels3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_connect_channels3'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_modes.py::TestMODE::()' lenresult=43 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_modes.py::TestMODE' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestPermissions'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestPermissions'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestPermissions'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_modes.py::TestPermissions' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: test_permissions_oper6
            obj: <function TestPermissions.test_permissions_oper6 at 0x1035b1378>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035cdf28>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_oper6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_oper3
            obj: <function TestPermissions.test_permissions_oper3 at 0x1035b11e0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103590908>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_oper3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_notice
            obj: <function TestPermissions.test_permissions_notice at 0x1035b0ea0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c7f60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_notice'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('MODES',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestPermissions' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: _oper
            obj: <function TestPermissions._oper at 0x1035b0b70>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_topic1
            obj: <function TestPermissions.test_permissions_topic1 at 0x1035b0f28>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035db2b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_topic1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_privmsg2
            obj: <function TestPermissions.test_permissions_privmsg2 at 0x1035b0c80>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035db6a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_privmsg2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_topic2
            obj: <function TestPermissions.test_permissions_topic2 at 0x1035b1048>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035db048>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_topic2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_oper1
            obj: <function TestPermissions.test_permissions_oper1 at 0x1035b10d0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035db470>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_oper1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_privmsg4
            obj: <function TestPermissions.test_permissions_privmsg4 at 0x1035b0d90>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035db0f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_privmsg4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestPermissions' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_privmsg1
            obj: <function TestPermissions.test_permissions_privmsg1 at 0x1035b0bf8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035dbc88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_privmsg1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_privmsg3
            obj: <function TestPermissions.test_permissions_privmsg3 at 0x1035b0d08>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035dbeb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_privmsg3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_modes
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_privmsg5
            obj: <function TestPermissions.test_permissions_privmsg5 at 0x1035b0e18>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e5160>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_privmsg5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_oper4
            obj: <function TestPermissions.test_permissions_oper4 at 0x1035b1268>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e5390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_oper4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: _join_and_mode
            obj: <function TestPermissions._join_and_mode at 0x1035b0a60>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: _privmsg
            obj: <function TestPermissions._privmsg at 0x1035b0ae8>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_oper2
            obj: <function TestPermissions.test_permissions_oper2 at 0x1035b1158>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e5630>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_oper2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_permissions_oper5
            obj: <function TestPermissions.test_permissions_oper5 at 0x1035b12f0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e5860>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_permissions_oper5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_modes.py::TestPermissions::()' lenresult=14 outcome='passed'> [hook]
    genitems <Function 'test_permissions_privmsg1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_privmsg1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_privmsg2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_privmsg2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_privmsg3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_privmsg3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_privmsg4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_privmsg4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_privmsg5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_privmsg5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_notice'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_notice'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_topic1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_topic1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_topic2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_topic2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_oper1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_oper1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_oper2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_oper2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_oper3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_oper3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_oper4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_oper4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_oper5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_oper5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_permissions_oper6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_permissions_oper6'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_modes.py::TestPermissions::()' lenresult=14 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_modes.py::TestPermissions' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestAWAY'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestAWAY'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestAWAY'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_modes.py::TestAWAY' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestAWAY' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_away4
            obj: <function TestAWAY.test_away4 at 0x1035b16a8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e5390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_away4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('AWAY',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_away6
            obj: <function TestAWAY.test_away6 at 0x1035b17b8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035dbcc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_away6'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: _away
            obj: <function TestAWAY._away at 0x1035b1400>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_away3
            obj: <function TestAWAY.test_away3 at 0x1035b1620>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035db710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_away3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_away5
            obj: <function TestAWAY.test_away5 at 0x1035b1730>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035c7f60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_away5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestAWAY' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: _unaway
            obj: <function TestAWAY._unaway at 0x1035b1488>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_away1
            obj: <function TestAWAY.test_away1 at 0x1035b1510>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035d73c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_away1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_away2
            obj: <function TestAWAY.test_away2 at 0x1035b1598>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035d7f98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_away2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_modes
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_modes.py::TestAWAY::()' lenresult=6 outcome='passed'> [hook]
    genitems <Function 'test_away1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_away1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_away2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_away2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_away3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_away3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_away4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_away4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_away5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_away5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_away6'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_away6'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_modes.py::TestAWAY::()' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_modes.py::TestAWAY' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_modes.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'tests/chirc/tests/test_ping.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'tests/chirc/tests/test_ping.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'tests/chirc/tests/test_ping.py'>
      find_module called for: chirc.tests.test_ping [assertion]
      matched test file '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_ping.py' [assertion]
      found cached rewritten pyc for '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_ping.py' [assertion]
        pytest_pycollect_makeitem [hook]
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __name__
            obj: chirc.tests.test_ping
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: ReplyTimeoutException
            obj: <class 'chirc.types.ReplyTimeoutException'>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestPING
            obj: <class 'chirc.tests.test_ping.TestPING'>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestPING'> [hook]
        pytest_pycollect_makeitem [hook]
            name: __cached__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_ping.cpython-35-PYTEST.pyc
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/rewrite.py'>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __spec__
            obj: ModuleSpec(name='chirc.tests.test_ping', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __file__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_ping.py
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestPONG
            obj: <class 'chirc.tests.test_ping.TestPONG'>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestPONG'> [hook]
        pytest_pycollect_makeitem [hook]
            name: pytest
            obj: <module 'pytest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytest.py'>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __package__
            obj: chirc.tests
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __builtins__
            obj: {'hash': <built-in function hash>, 'hasattr': <built-in function hasattr>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'IndentationError': <class 'IndentationError'>, 'len': <built-in function len>, 'IndexError': <class 'IndexError'>, 'complex': <class 'complex'>, 'id': <built-in function id>, 'OverflowError': <class 'OverflowError'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'bin': <built-in function bin>, '__build_class__': <built-in function __build_class__>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'SystemExit': <class 'SystemExit'>, 'TimeoutError': <class 'TimeoutError'>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'IsADirectoryError': <class 'IsADirectoryError'>, 'EOFError': <class 'EOFError'>, 'NameError': <class 'NameError'>, 'round': <built-in function round>, 'RuntimeError': <class 'RuntimeError'>, 'compile': <built-in function compile>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'vars': <built-in function vars>, 'MemoryError': <class 'MemoryError'>, 'True': True, 'ValueError': <class 'ValueError'>, 'pow': <built-in function pow>, 'AttributeError': <class 'AttributeError'>, 'classmethod': <class 'classmethod'>, 'FloatingPointError': <class 'FloatingPointError'>, 'max': <built-in function max>, 'UnicodeError': <class 'UnicodeError'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'format': <built-in function format>, 'frozenset': <class 'frozenset'>, 'sorted': <built-in function sorted>, 'eval': <built-in function eval>, 'SyntaxError': <class 'SyntaxError'>, '__import__': <built-in function __import__>, 'dict': <class 'dict'>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'ProcessLookupError': <class 'ProcessLookupError'>, 'any': <built-in function any>, 'type': <class 'type'>, 'memoryview': <class 'memoryview'>, 'open': <built-in function open>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'float': <class 'float'>, 'BytesWarning': <class 'BytesWarning'>, 'copyright': Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'help': Type help() for interactive help, or help(object) for help about object., 'IOError': <class 'OSError'>, 'TypeError': <class 'TypeError'>, 'ImportWarning': <class 'ImportWarning'>, 'abs': <built-in function abs>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 'set': <class 'set'>, 'None': None, 'LookupError': <class 'LookupError'>, 'str': <class 'str'>, 'exec': <built-in function exec>, 'super': <class 'super'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'enumerate': <class 'enumerate'>, 'tuple': <class 'tuple'>, 'RecursionError': <class 'RecursionError'>, 'FutureWarning': <class 'FutureWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'hex': <built-in function hex>, 'zip': <class 'zip'>, 'slice': <class 'slice'>, 'list': <class 'list'>, 'bool': <class 'bool'>, 'Exception': <class 'Exception'>, 'OSError': <class 'OSError'>, 'globals': <built-in function globals>, 'NotImplementedError': <class 'NotImplementedError'>, 'GeneratorExit': <class 'GeneratorExit'>, 'getattr': <built-in function getattr>, 'SystemError': <class 'SystemError'>, 'Warning': <class 'Warning'>, 'ArithmeticError': <class 'ArithmeticError'>, 'BaseException': <class 'BaseException'>, 'next': <built-in function next>, 'PermissionError': <class 'PermissionError'>, 'map': <class 'map'>, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'AssertionError': <class 'AssertionError'>, 'InterruptedError': <class 'InterruptedError'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'KeyError': <class 'KeyError'>, 'ReferenceError': <class 'ReferenceError'>, '__package__': '', 'ord': <built-in function ord>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'EnvironmentError': <class 'OSError'>, 'delattr': <built-in function delattr>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'UserWarning': <class 'UserWarning'>, 'ChildProcessError': <class 'ChildProcessError'>, '__debug__': True, 'bytearray': <class 'bytearray'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'isinstance': <built-in function isinstance>, 'divmod': <built-in function divmod>, 'input': <built-in function input>, 'ImportError': <class 'ImportError'>, 'chr': <built-in function chr>, 'Ellipsis': Ellipsis, 'False': False, 'RuntimeWarning': <class 'RuntimeWarning'>, 'TabError': <class 'TabError'>, 'min': <built-in function min>, 'property': <class 'property'>, 'FileExistsError': <class 'FileExistsError'>, 'bytes': <class 'bytes'>, 'locals': <built-in function locals>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'object': <class 'object'>, 'NotImplemented': NotImplemented, 'ResourceWarning': <class 'ResourceWarning'>, 'filter': <class 'filter'>, 'BlockingIOError': <class 'BlockingIOError'>, 'int': <class 'int'>, 'BufferError': <class 'BufferError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'oct': <built-in function oct>, 'issubclass': <built-in function issubclass>, 'staticmethod': <class 'staticmethod'>, 'callable': <built-in function callable>, 'print': <built-in function print>, 'ascii': <built-in function ascii>, 'dir': <built-in function dir>, 'sum': <built-in function sum>, 'setattr': <built-in function setattr>, 'all': <built-in function all>, 'StopIteration': <class 'StopIteration'>, 'repr': <built-in function repr>, '__name__': 'builtins', 'iter': <built-in function iter>, 'license': Type license() to see the full license text}
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x100228680>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_ping.py'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_ping.py' lenresult=2 outcome='passed'> [hook]
    genitems <Class 'TestPING'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestPING'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestPING'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_ping.py::TestPING' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestPING' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_ping
            obj: <function TestPING.test_ping at 0x1035e8048>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e3668>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_ping'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_multiping1
            obj: <function TestPING.test_multiping1 at 0x1035e82f0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e33c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_multiping1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_multiping4
            obj: <function TestPING.test_multiping4 at 0x1035e8488>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e3198>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_multiping4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_ping
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestPING' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_multiping3
            obj: <function TestPING.test_multiping3 at 0x1035e8400>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035db710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_multiping3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('PING_PONG',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_multiping2
            obj: <function TestPING.test_multiping2 at 0x1035e8378>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035d7dd8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_multiping2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_multiping
            obj: <function TestPING._test_multiping at 0x1035e8158>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_ping.py::TestPING::()' lenresult=5 outcome='passed'> [hook]
    genitems <Function 'test_ping'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_ping'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_multiping1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_multiping1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_multiping2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_multiping2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_multiping3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_multiping3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_multiping4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_multiping4'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_ping.py::TestPING::()' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_ping.py::TestPING' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestPONG'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestPONG'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestPONG'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_ping.py::TestPONG' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestPONG' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestPONG' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_pong
            obj: <function TestPONG.test_pong at 0x1035e8510>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035ee2e8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_pong'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('PING_PONG',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_ping
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_ping.py::TestPONG::()' lenresult=1 outcome='passed'> [hook]
    genitems <Function 'test_pong'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_pong'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_ping.py::TestPONG::()' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_ping.py::TestPONG' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_ping.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'tests/chirc/tests/test_privmsg.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'tests/chirc/tests/test_privmsg.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'tests/chirc/tests/test_privmsg.py'>
      find_module called for: chirc.tests.test_privmsg [assertion]
      matched test file '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_privmsg.py' [assertion]
      found cached rewritten pyc for '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_privmsg.py' [assertion]
        pytest_pycollect_makeitem [hook]
            name: TestNOTICE
            obj: <class 'chirc.tests.test_privmsg.TestNOTICE'>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestNOTICE'> [hook]
        pytest_pycollect_makeitem [hook]
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __name__
            obj: chirc.tests.test_privmsg
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: ReplyTimeoutException
            obj: <class 'chirc.types.ReplyTimeoutException'>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __cached__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_privmsg.cpython-35-PYTEST.pyc
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/rewrite.py'>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __spec__
            obj: ModuleSpec(name='chirc.tests.test_privmsg', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: replies
            obj: <module 'chirc.replies' from '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/replies.py'>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __file__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_privmsg.py
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: re
            obj: <module 're' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/re.py'>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: time
            obj: <module 'time' (built-in)>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestPRIVMSG
            obj: <class 'chirc.tests.test_privmsg.TestPRIVMSG'>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestPRIVMSG'> [hook]
        pytest_pycollect_makeitem [hook]
            name: pytest
            obj: <module 'pytest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytest.py'>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __package__
            obj: chirc.tests
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __builtins__
            obj: {'hash': <built-in function hash>, 'hasattr': <built-in function hasattr>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'IndentationError': <class 'IndentationError'>, 'len': <built-in function len>, 'IndexError': <class 'IndexError'>, 'complex': <class 'complex'>, 'id': <built-in function id>, 'OverflowError': <class 'OverflowError'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'bin': <built-in function bin>, '__build_class__': <built-in function __build_class__>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'SystemExit': <class 'SystemExit'>, 'TimeoutError': <class 'TimeoutError'>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'IsADirectoryError': <class 'IsADirectoryError'>, 'EOFError': <class 'EOFError'>, 'NameError': <class 'NameError'>, 'round': <built-in function round>, 'RuntimeError': <class 'RuntimeError'>, 'compile': <built-in function compile>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'vars': <built-in function vars>, 'MemoryError': <class 'MemoryError'>, 'True': True, 'ValueError': <class 'ValueError'>, 'pow': <built-in function pow>, 'AttributeError': <class 'AttributeError'>, 'classmethod': <class 'classmethod'>, 'FloatingPointError': <class 'FloatingPointError'>, 'max': <built-in function max>, 'UnicodeError': <class 'UnicodeError'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'format': <built-in function format>, 'frozenset': <class 'frozenset'>, 'sorted': <built-in function sorted>, 'eval': <built-in function eval>, 'SyntaxError': <class 'SyntaxError'>, '__import__': <built-in function __import__>, 'dict': <class 'dict'>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'ProcessLookupError': <class 'ProcessLookupError'>, 'any': <built-in function any>, 'type': <class 'type'>, 'memoryview': <class 'memoryview'>, 'open': <built-in function open>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'float': <class 'float'>, 'BytesWarning': <class 'BytesWarning'>, 'copyright': Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'help': Type help() for interactive help, or help(object) for help about object., 'IOError': <class 'OSError'>, 'TypeError': <class 'TypeError'>, 'ImportWarning': <class 'ImportWarning'>, 'abs': <built-in function abs>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 'set': <class 'set'>, 'None': None, 'LookupError': <class 'LookupError'>, 'str': <class 'str'>, 'exec': <built-in function exec>, 'super': <class 'super'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'enumerate': <class 'enumerate'>, 'tuple': <class 'tuple'>, 'RecursionError': <class 'RecursionError'>, 'FutureWarning': <class 'FutureWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'hex': <built-in function hex>, 'zip': <class 'zip'>, 'slice': <class 'slice'>, 'list': <class 'list'>, 'bool': <class 'bool'>, 'Exception': <class 'Exception'>, 'OSError': <class 'OSError'>, 'globals': <built-in function globals>, 'NotImplementedError': <class 'NotImplementedError'>, 'GeneratorExit': <class 'GeneratorExit'>, 'getattr': <built-in function getattr>, 'SystemError': <class 'SystemError'>, 'Warning': <class 'Warning'>, 'ArithmeticError': <class 'ArithmeticError'>, 'BaseException': <class 'BaseException'>, 'next': <built-in function next>, 'PermissionError': <class 'PermissionError'>, 'map': <class 'map'>, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'AssertionError': <class 'AssertionError'>, 'InterruptedError': <class 'InterruptedError'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'KeyError': <class 'KeyError'>, 'ReferenceError': <class 'ReferenceError'>, '__package__': '', 'ord': <built-in function ord>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'EnvironmentError': <class 'OSError'>, 'delattr': <built-in function delattr>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'UserWarning': <class 'UserWarning'>, 'ChildProcessError': <class 'ChildProcessError'>, '__debug__': True, 'bytearray': <class 'bytearray'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'isinstance': <built-in function isinstance>, 'divmod': <built-in function divmod>, 'input': <built-in function input>, 'ImportError': <class 'ImportError'>, 'chr': <built-in function chr>, 'Ellipsis': Ellipsis, 'False': False, 'RuntimeWarning': <class 'RuntimeWarning'>, 'TabError': <class 'TabError'>, 'min': <built-in function min>, 'property': <class 'property'>, 'FileExistsError': <class 'FileExistsError'>, 'bytes': <class 'bytes'>, 'locals': <built-in function locals>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'object': <class 'object'>, 'NotImplemented': NotImplemented, 'ResourceWarning': <class 'ResourceWarning'>, 'filter': <class 'filter'>, 'BlockingIOError': <class 'BlockingIOError'>, 'int': <class 'int'>, 'BufferError': <class 'BufferError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'oct': <built-in function oct>, 'issubclass': <built-in function issubclass>, 'staticmethod': <class 'staticmethod'>, 'callable': <built-in function callable>, 'print': <built-in function print>, 'ascii': <built-in function ascii>, 'dir': <built-in function dir>, 'sum': <built-in function sum>, 'setattr': <built-in function setattr>, 'all': <built-in function all>, 'StopIteration': <class 'StopIteration'>, 'repr': <built-in function repr>, '__name__': 'builtins', 'iter': <built-in function iter>, 'license': Type license() to see the full license text}
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x100228680>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_privmsg.py'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_privmsg.py' lenresult=2 outcome='passed'> [hook]
    genitems <Class 'TestPRIVMSG'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestPRIVMSG'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestPRIVMSG'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestPRIVMSG' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_privmsg2
            obj: <function TestPRIVMSG.test_privmsg2 at 0x1035e80d0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e5b70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_privmsg2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_privmsg1
            obj: <function TestPRIVMSG.test_privmsg1 at 0x1035e86a8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e5be0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_privmsg1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_privmsg_nonick
            obj: <function TestPRIVMSG.test_privmsg_nonick at 0x1035e89d8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e5898>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_privmsg_nonick'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_privmsg_multiple2
            obj: <function TestPRIVMSG.test_privmsg_multiple2 at 0x1035e87b8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035aecc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_privmsg_multiple2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_privmsg_multiple3
            obj: <function TestPRIVMSG.test_privmsg_multiple3 at 0x1035e8840>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e3da0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_privmsg_multiple3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_privmsg_multiple4
            obj: <function TestPRIVMSG.test_privmsg_multiple4 at 0x1035e88c8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035e36a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_privmsg_multiple4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestPRIVMSG' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_privmsg_multiple1
            obj: <function TestPRIVMSG.test_privmsg_multiple1 at 0x1035e8730>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035f0208>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_privmsg_multiple1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_privmsg_multiple5
            obj: <function TestPRIVMSG.test_privmsg_multiple5 at 0x1035e8950>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035f04e0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_privmsg_multiple5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_multi_clients
            obj: <function TestPRIVMSG._test_multi_clients at 0x1035e81e0>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('PRIVMSG_NOTICE',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_privmsg
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()' lenresult=8 outcome='passed'> [hook]
    genitems <Function 'test_privmsg1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_privmsg1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_privmsg2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_privmsg2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_privmsg_multiple1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_privmsg_multiple1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_privmsg_multiple2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_privmsg_multiple2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_privmsg_multiple3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_privmsg_multiple3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_privmsg_multiple4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_privmsg_multiple4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_privmsg_multiple5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_privmsg_multiple5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_privmsg_nonick'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_privmsg_nonick'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Class 'TestNOTICE'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestNOTICE'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestNOTICE'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestNOTICE' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestNOTICE' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_notice
            obj: <function TestNOTICE.test_notice at 0x1035e8a60>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035ff128>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_notice'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('PRIVMSG_NOTICE',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_notice_nonick
            obj: <function TestNOTICE.test_notice_nonick at 0x1035e8ae8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035ff3c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_notice_nonick'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_privmsg
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()' lenresult=2 outcome='passed'> [hook]
    genitems <Function 'test_notice'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_notice'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_notice_nonick'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_notice_nonick'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_privmsg.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'tests/chirc/tests/test_robustness.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'tests/chirc/tests/test_robustness.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'tests/chirc/tests/test_robustness.py'>
      find_module called for: chirc.tests.test_robustness [assertion]
      matched test file '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_robustness.py' [assertion]
      found cached rewritten pyc for '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_robustness.py' [assertion]
        pytest_pycollect_makeitem [hook]
            name: TestRobustness
            obj: <class 'chirc.tests.test_robustness.TestRobustness'>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestRobustness'> [hook]
        pytest_pycollect_makeitem [hook]
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __name__
            obj: chirc.tests.test_robustness
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: ReplyTimeoutException
            obj: <class 'chirc.types.ReplyTimeoutException'>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __cached__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_robustness.cpython-35-PYTEST.pyc
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/rewrite.py'>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __spec__
            obj: ModuleSpec(name='chirc.tests.test_robustness', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: replies
            obj: <module 'chirc.replies' from '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/replies.py'>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __file__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_robustness.py
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytest
            obj: <module 'pytest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytest.py'>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __package__
            obj: chirc.tests
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __builtins__
            obj: {'hash': <built-in function hash>, 'hasattr': <built-in function hasattr>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'IndentationError': <class 'IndentationError'>, 'len': <built-in function len>, 'IndexError': <class 'IndexError'>, 'complex': <class 'complex'>, 'id': <built-in function id>, 'OverflowError': <class 'OverflowError'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'bin': <built-in function bin>, '__build_class__': <built-in function __build_class__>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'SystemExit': <class 'SystemExit'>, 'TimeoutError': <class 'TimeoutError'>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'IsADirectoryError': <class 'IsADirectoryError'>, 'EOFError': <class 'EOFError'>, 'NameError': <class 'NameError'>, 'round': <built-in function round>, 'RuntimeError': <class 'RuntimeError'>, 'compile': <built-in function compile>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'vars': <built-in function vars>, 'MemoryError': <class 'MemoryError'>, 'True': True, 'ValueError': <class 'ValueError'>, 'pow': <built-in function pow>, 'AttributeError': <class 'AttributeError'>, 'classmethod': <class 'classmethod'>, 'FloatingPointError': <class 'FloatingPointError'>, 'max': <built-in function max>, 'UnicodeError': <class 'UnicodeError'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'format': <built-in function format>, 'frozenset': <class 'frozenset'>, 'sorted': <built-in function sorted>, 'eval': <built-in function eval>, 'SyntaxError': <class 'SyntaxError'>, '__import__': <built-in function __import__>, 'dict': <class 'dict'>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'ProcessLookupError': <class 'ProcessLookupError'>, 'any': <built-in function any>, 'type': <class 'type'>, 'memoryview': <class 'memoryview'>, 'open': <built-in function open>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'float': <class 'float'>, 'BytesWarning': <class 'BytesWarning'>, 'copyright': Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'help': Type help() for interactive help, or help(object) for help about object., 'IOError': <class 'OSError'>, 'TypeError': <class 'TypeError'>, 'ImportWarning': <class 'ImportWarning'>, 'abs': <built-in function abs>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 'set': <class 'set'>, 'None': None, 'LookupError': <class 'LookupError'>, 'str': <class 'str'>, 'exec': <built-in function exec>, 'super': <class 'super'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'enumerate': <class 'enumerate'>, 'tuple': <class 'tuple'>, 'RecursionError': <class 'RecursionError'>, 'FutureWarning': <class 'FutureWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'hex': <built-in function hex>, 'zip': <class 'zip'>, 'slice': <class 'slice'>, 'list': <class 'list'>, 'bool': <class 'bool'>, 'Exception': <class 'Exception'>, 'OSError': <class 'OSError'>, 'globals': <built-in function globals>, 'NotImplementedError': <class 'NotImplementedError'>, 'GeneratorExit': <class 'GeneratorExit'>, 'getattr': <built-in function getattr>, 'SystemError': <class 'SystemError'>, 'Warning': <class 'Warning'>, 'ArithmeticError': <class 'ArithmeticError'>, 'BaseException': <class 'BaseException'>, 'next': <built-in function next>, 'PermissionError': <class 'PermissionError'>, 'map': <class 'map'>, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'AssertionError': <class 'AssertionError'>, 'InterruptedError': <class 'InterruptedError'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'KeyError': <class 'KeyError'>, 'ReferenceError': <class 'ReferenceError'>, '__package__': '', 'ord': <built-in function ord>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'EnvironmentError': <class 'OSError'>, 'delattr': <built-in function delattr>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'UserWarning': <class 'UserWarning'>, 'ChildProcessError': <class 'ChildProcessError'>, '__debug__': True, 'bytearray': <class 'bytearray'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'isinstance': <built-in function isinstance>, 'divmod': <built-in function divmod>, 'input': <built-in function input>, 'ImportError': <class 'ImportError'>, 'chr': <built-in function chr>, 'Ellipsis': Ellipsis, 'False': False, 'RuntimeWarning': <class 'RuntimeWarning'>, 'TabError': <class 'TabError'>, 'min': <built-in function min>, 'property': <class 'property'>, 'FileExistsError': <class 'FileExistsError'>, 'bytes': <class 'bytes'>, 'locals': <built-in function locals>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'object': <class 'object'>, 'NotImplemented': NotImplemented, 'ResourceWarning': <class 'ResourceWarning'>, 'filter': <class 'filter'>, 'BlockingIOError': <class 'BlockingIOError'>, 'int': <class 'int'>, 'BufferError': <class 'BufferError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'oct': <built-in function oct>, 'issubclass': <built-in function issubclass>, 'staticmethod': <class 'staticmethod'>, 'callable': <built-in function callable>, 'print': <built-in function print>, 'ascii': <built-in function ascii>, 'dir': <built-in function dir>, 'sum': <built-in function sum>, 'setattr': <built-in function setattr>, 'all': <built-in function all>, 'StopIteration': <class 'StopIteration'>, 'repr': <built-in function repr>, '__name__': 'builtins', 'iter': <built-in function iter>, 'license': Type license() to see the full license text}
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x100228680>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_robustness.py'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_robustness.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class 'TestRobustness'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestRobustness'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestRobustness'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_robustness.py::TestRobustness' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: test_whitespace5
            obj: <function TestRobustness.test_whitespace5 at 0x103601048>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035ff7f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_whitespace5'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_length3
            obj: <function TestRobustness.test_length3 at 0x103601268>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035ff9e8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_length3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_length4
            obj: <function TestRobustness.test_length4 at 0x1036012f0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035ffc18>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_length4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('ROBUST',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestRobustness' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_length1
            obj: <function TestRobustness.test_length1 at 0x103601158>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035ffeb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_length1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_whitespace3
            obj: <function TestRobustness.test_whitespace3 at 0x1035e8ea0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103602128>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_whitespace3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestRobustness' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_length2
            obj: <function TestRobustness.test_length2 at 0x1036011e0>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1036023c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_length2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: _gen_long_msg
            obj: <function TestRobustness._gen_long_msg at 0x1036010d0>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_whitespace2
            obj: <function TestRobustness.test_whitespace2 at 0x1035e8d08>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103602630>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_whitespace2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_whitespace1
            obj: <function TestRobustness.test_whitespace1 at 0x1035e8e18>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103602860>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_whitespace1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_whitespace4
            obj: <function TestRobustness.test_whitespace4 at 0x1035e8f28>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035ffdd8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_whitespace4'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_robustness
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()' lenresult=9 outcome='passed'> [hook]
    genitems <Function 'test_whitespace1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_whitespace1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_whitespace2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_whitespace2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_whitespace3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_whitespace3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_whitespace4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_whitespace4'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_whitespace5'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_whitespace5'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_length1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_length1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_length2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_length2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_length3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_length3'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_length4'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_length4'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_robustness.py::TestRobustness' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_robustness.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'tests/chirc/tests/test_unknown.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'tests/chirc/tests/test_unknown.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'tests/chirc/tests/test_unknown.py'>
      find_module called for: chirc.tests.test_unknown [assertion]
      matched test file '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_unknown.py' [assertion]
      found cached rewritten pyc for '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_unknown.py' [assertion]
        pytest_pycollect_makeitem [hook]
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __name__
            obj: chirc.tests.test_unknown
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __cached__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_unknown.cpython-35-PYTEST.pyc
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/rewrite.py'>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __spec__
            obj: ModuleSpec(name='chirc.tests.test_unknown', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: replies
            obj: <module 'chirc.replies' from '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/replies.py'>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __file__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_unknown.py
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: TestUnknownCommands
            obj: <class 'chirc.tests.test_unknown.TestUnknownCommands'>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestUnknownCommands'> [hook]
        pytest_pycollect_makeitem [hook]
            name: pytest
            obj: <module 'pytest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytest.py'>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __package__
            obj: chirc.tests
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __builtins__
            obj: {'hash': <built-in function hash>, 'hasattr': <built-in function hasattr>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'IndentationError': <class 'IndentationError'>, 'len': <built-in function len>, 'IndexError': <class 'IndexError'>, 'complex': <class 'complex'>, 'id': <built-in function id>, 'OverflowError': <class 'OverflowError'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'bin': <built-in function bin>, '__build_class__': <built-in function __build_class__>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'SystemExit': <class 'SystemExit'>, 'TimeoutError': <class 'TimeoutError'>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'IsADirectoryError': <class 'IsADirectoryError'>, 'EOFError': <class 'EOFError'>, 'NameError': <class 'NameError'>, 'round': <built-in function round>, 'RuntimeError': <class 'RuntimeError'>, 'compile': <built-in function compile>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'vars': <built-in function vars>, 'MemoryError': <class 'MemoryError'>, 'True': True, 'ValueError': <class 'ValueError'>, 'pow': <built-in function pow>, 'AttributeError': <class 'AttributeError'>, 'classmethod': <class 'classmethod'>, 'FloatingPointError': <class 'FloatingPointError'>, 'max': <built-in function max>, 'UnicodeError': <class 'UnicodeError'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'format': <built-in function format>, 'frozenset': <class 'frozenset'>, 'sorted': <built-in function sorted>, 'eval': <built-in function eval>, 'SyntaxError': <class 'SyntaxError'>, '__import__': <built-in function __import__>, 'dict': <class 'dict'>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'ProcessLookupError': <class 'ProcessLookupError'>, 'any': <built-in function any>, 'type': <class 'type'>, 'memoryview': <class 'memoryview'>, 'open': <built-in function open>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'float': <class 'float'>, 'BytesWarning': <class 'BytesWarning'>, 'copyright': Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'help': Type help() for interactive help, or help(object) for help about object., 'IOError': <class 'OSError'>, 'TypeError': <class 'TypeError'>, 'ImportWarning': <class 'ImportWarning'>, 'abs': <built-in function abs>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 'set': <class 'set'>, 'None': None, 'LookupError': <class 'LookupError'>, 'str': <class 'str'>, 'exec': <built-in function exec>, 'super': <class 'super'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'enumerate': <class 'enumerate'>, 'tuple': <class 'tuple'>, 'RecursionError': <class 'RecursionError'>, 'FutureWarning': <class 'FutureWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'hex': <built-in function hex>, 'zip': <class 'zip'>, 'slice': <class 'slice'>, 'list': <class 'list'>, 'bool': <class 'bool'>, 'Exception': <class 'Exception'>, 'OSError': <class 'OSError'>, 'globals': <built-in function globals>, 'NotImplementedError': <class 'NotImplementedError'>, 'GeneratorExit': <class 'GeneratorExit'>, 'getattr': <built-in function getattr>, 'SystemError': <class 'SystemError'>, 'Warning': <class 'Warning'>, 'ArithmeticError': <class 'ArithmeticError'>, 'BaseException': <class 'BaseException'>, 'next': <built-in function next>, 'PermissionError': <class 'PermissionError'>, 'map': <class 'map'>, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'AssertionError': <class 'AssertionError'>, 'InterruptedError': <class 'InterruptedError'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'KeyError': <class 'KeyError'>, 'ReferenceError': <class 'ReferenceError'>, '__package__': '', 'ord': <built-in function ord>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'EnvironmentError': <class 'OSError'>, 'delattr': <built-in function delattr>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'UserWarning': <class 'UserWarning'>, 'ChildProcessError': <class 'ChildProcessError'>, '__debug__': True, 'bytearray': <class 'bytearray'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'isinstance': <built-in function isinstance>, 'divmod': <built-in function divmod>, 'input': <built-in function input>, 'ImportError': <class 'ImportError'>, 'chr': <built-in function chr>, 'Ellipsis': Ellipsis, 'False': False, 'RuntimeWarning': <class 'RuntimeWarning'>, 'TabError': <class 'TabError'>, 'min': <built-in function min>, 'property': <class 'property'>, 'FileExistsError': <class 'FileExistsError'>, 'bytes': <class 'bytes'>, 'locals': <built-in function locals>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'object': <class 'object'>, 'NotImplemented': NotImplemented, 'ResourceWarning': <class 'ResourceWarning'>, 'filter': <class 'filter'>, 'BlockingIOError': <class 'BlockingIOError'>, 'int': <class 'int'>, 'BufferError': <class 'BufferError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'oct': <built-in function oct>, 'issubclass': <built-in function issubclass>, 'staticmethod': <class 'staticmethod'>, 'callable': <built-in function callable>, 'print': <built-in function print>, 'ascii': <built-in function ascii>, 'dir': <built-in function dir>, 'sum': <built-in function sum>, 'setattr': <built-in function setattr>, 'all': <built-in function all>, 'StopIteration': <class 'StopIteration'>, 'repr': <built-in function repr>, '__name__': 'builtins', 'iter': <built-in function iter>, 'license': Type license() to see the full license text}
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x100228680>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_unknown.py'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_unknown.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class 'TestUnknownCommands'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestUnknownCommands'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestUnknownCommands'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestUnknownCommands' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestUnknownCommands' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_unknown3
            obj: <function TestUnknownCommands.test_unknown3 at 0x103601510>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103602ac8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_unknown3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytestmark
            obj: [<MarkDecorator 'category' {'kwargs': {}, 'args': ('ERR_UNKNOWN',)}>]
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_unknown1
            obj: <function TestUnknownCommands.test_unknown1 at 0x103601400>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103602d68>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_unknown1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_unknown2
            obj: <function TestUnknownCommands.test_unknown2 at 0x103601488>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x103602f98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_unknown2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_unknown
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()' lenresult=3 outcome='passed'> [hook]
    genitems <Function 'test_unknown1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_unknown1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_unknown2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_unknown2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_unknown3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_unknown3'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_unknown.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module 'tests/chirc/tests/test_whois.py'> [collection]
      pytest_collectstart [hook]
          collector: <Module 'tests/chirc/tests/test_whois.py'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module 'tests/chirc/tests/test_whois.py'>
      find_module called for: chirc.tests.test_whois [assertion]
      matched test file '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_whois.py' [assertion]
      found cached rewritten pyc for '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_whois.py' [assertion]
        pytest_pycollect_makeitem [hook]
            name: TestWHOIS
            obj: <class 'chirc.tests.test_whois.TestWHOIS'>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> <Class 'TestWHOIS'> [hook]
        pytest_pycollect_makeitem [hook]
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __name__
            obj: chirc.tests.test_whois
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: fixtures
            obj: <module 'chirc.tests.fixtures' from '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/fixtures.py'>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __cached__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/__pycache__/test_whois.cpython-35-PYTEST.pyc
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/_pytest/assertion/rewrite.py'>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __spec__
            obj: ModuleSpec(name='chirc.tests.test_whois', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x1033969b0>)
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: replies
            obj: <module 'chirc.replies' from '/Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/replies.py'>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __file__
            obj: /Users/james/Documents/Recurse_Center/irc_server/chirc/tests/chirc/tests/test_whois.py
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: pytest
            obj: <module 'pytest' from '/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pytest.py'>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __package__
            obj: chirc.tests
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __builtins__
            obj: {'hash': <built-in function hash>, 'hasattr': <built-in function hasattr>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'IndentationError': <class 'IndentationError'>, 'len': <built-in function len>, 'IndexError': <class 'IndexError'>, 'complex': <class 'complex'>, 'id': <built-in function id>, 'OverflowError': <class 'OverflowError'>, '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", 'bin': <built-in function bin>, '__build_class__': <built-in function __build_class__>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'SystemExit': <class 'SystemExit'>, 'TimeoutError': <class 'TimeoutError'>, 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'IsADirectoryError': <class 'IsADirectoryError'>, 'EOFError': <class 'EOFError'>, 'NameError': <class 'NameError'>, 'round': <built-in function round>, 'RuntimeError': <class 'RuntimeError'>, 'compile': <built-in function compile>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'vars': <built-in function vars>, 'MemoryError': <class 'MemoryError'>, 'True': True, 'ValueError': <class 'ValueError'>, 'pow': <built-in function pow>, 'AttributeError': <class 'AttributeError'>, 'classmethod': <class 'classmethod'>, 'FloatingPointError': <class 'FloatingPointError'>, 'max': <built-in function max>, 'UnicodeError': <class 'UnicodeError'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'format': <built-in function format>, 'frozenset': <class 'frozenset'>, 'sorted': <built-in function sorted>, 'eval': <built-in function eval>, 'SyntaxError': <class 'SyntaxError'>, '__import__': <built-in function __import__>, 'dict': <class 'dict'>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'ProcessLookupError': <class 'ProcessLookupError'>, 'any': <built-in function any>, 'type': <class 'type'>, 'memoryview': <class 'memoryview'>, 'open': <built-in function open>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'float': <class 'float'>, 'BytesWarning': <class 'BytesWarning'>, 'copyright': Copyright (c) 2001-2016 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'help': Type help() for interactive help, or help(object) for help about object., 'IOError': <class 'OSError'>, 'TypeError': <class 'TypeError'>, 'ImportWarning': <class 'ImportWarning'>, 'abs': <built-in function abs>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), 'set': <class 'set'>, 'None': None, 'LookupError': <class 'LookupError'>, 'str': <class 'str'>, 'exec': <built-in function exec>, 'super': <class 'super'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'enumerate': <class 'enumerate'>, 'tuple': <class 'tuple'>, 'RecursionError': <class 'RecursionError'>, 'FutureWarning': <class 'FutureWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'hex': <built-in function hex>, 'zip': <class 'zip'>, 'slice': <class 'slice'>, 'list': <class 'list'>, 'bool': <class 'bool'>, 'Exception': <class 'Exception'>, 'OSError': <class 'OSError'>, 'globals': <built-in function globals>, 'NotImplementedError': <class 'NotImplementedError'>, 'GeneratorExit': <class 'GeneratorExit'>, 'getattr': <built-in function getattr>, 'SystemError': <class 'SystemError'>, 'Warning': <class 'Warning'>, 'ArithmeticError': <class 'ArithmeticError'>, 'BaseException': <class 'BaseException'>, 'next': <built-in function next>, 'PermissionError': <class 'PermissionError'>, 'map': <class 'map'>, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, 'AssertionError': <class 'AssertionError'>, 'InterruptedError': <class 'InterruptedError'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'KeyError': <class 'KeyError'>, 'ReferenceError': <class 'ReferenceError'>, '__package__': '', 'ord': <built-in function ord>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'EnvironmentError': <class 'OSError'>, 'delattr': <built-in function delattr>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'UserWarning': <class 'UserWarning'>, 'ChildProcessError': <class 'ChildProcessError'>, '__debug__': True, 'bytearray': <class 'bytearray'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'isinstance': <built-in function isinstance>, 'divmod': <built-in function divmod>, 'input': <built-in function input>, 'ImportError': <class 'ImportError'>, 'chr': <built-in function chr>, 'Ellipsis': Ellipsis, 'False': False, 'RuntimeWarning': <class 'RuntimeWarning'>, 'TabError': <class 'TabError'>, 'min': <built-in function min>, 'property': <class 'property'>, 'FileExistsError': <class 'FileExistsError'>, 'bytes': <class 'bytes'>, 'locals': <built-in function locals>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'object': <class 'object'>, 'NotImplemented': NotImplemented, 'ResourceWarning': <class 'ResourceWarning'>, 'filter': <class 'filter'>, 'BlockingIOError': <class 'BlockingIOError'>, 'int': <class 'int'>, 'BufferError': <class 'BufferError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'oct': <built-in function oct>, 'issubclass': <built-in function issubclass>, 'staticmethod': <class 'staticmethod'>, 'callable': <built-in function callable>, 'print': <built-in function print>, 'ascii': <built-in function ascii>, 'dir': <built-in function dir>, 'sum': <built-in function sum>, 'setattr': <built-in function setattr>, 'all': <built-in function all>, 'StopIteration': <class 'StopIteration'>, 'repr': <built-in function repr>, '__name__': 'builtins', 'iter': <built-in function iter>, 'license': Type license() to see the full license text}
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x100228680>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Module 'tests/chirc/tests/test_whois.py'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_whois.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class 'TestWHOIS'> [collection]
      pytest_collectstart [hook]
          collector: <Class 'TestWHOIS'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class 'TestWHOIS'>
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_whois.py::TestWHOIS' lenresult=1 outcome='passed'> [hook]
    genitems <Instance '()'> [collection]
      pytest_collectstart [hook]
          collector: <Instance '()'>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance '()'>
        pytest_pycollect_makeitem [hook]
            name: __weakref__
            obj: <attribute '__weakref__' of 'TestWHOIS' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_whois1
            obj: <function TestWHOIS.test_whois1 at 0x103601378>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035f0c18>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_whois1'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __dict__
            obj: <attribute '__dict__' of 'TestWHOIS' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_whois3
            obj: <function TestWHOIS.test_whois3 at 0x103601a60>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035f0a58>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_whois3'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __doc__
            obj: None
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: test_whois_nonick
            obj: <function TestWHOIS.test_whois_nonick at 0x103601620>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035f0828>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_whois_nonick'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: test_whois2
            obj: <function TestWHOIS.test_whois2 at 0x1036019d8>
            collector: <Instance '()'>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x1035f0cf8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function 'test_whois2'>] [hook]
        pytest_pycollect_makeitem [hook]
            name: __module__
            obj: chirc.tests.test_whois
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: _test_userchannels
            obj: <function TestWHOIS._test_userchannels at 0x103601950>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __new__
            obj: <built-in method __new__ of type object at 0x10022bb20>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __format__
            obj: <method '__format__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
            collector: <Instance '()'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()' lenresult=4 outcome='passed'> [hook]
    genitems <Function 'test_whois1'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_whois1'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_whois_nonick'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_whois_nonick'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_whois2'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_whois2'>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function 'test_whois3'> [collection]
      pytest_itemcollected [hook]
          item: <Function 'test_whois3'>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_whois.py::TestWHOIS' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/chirc/tests/test_whois.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          items: [<Function 'test_join1'>, <Function 'test_join2'>, <Function 'test_join3'>, <Function 'test_join4'>, <Function 'test_join5'>, <Function 'test_channel_privmsg1'>, <Function 'test_channel_privmsg2'>, <Function 'test_channel_privmsg3'>, <Function 'test_channel_privmsg_nochannel'>, <Function 'test_channel_privmsg_notonchannel'>, <Function 'test_channel_notice_nochannel'>, <Function 'test_channel_part1'>, <Function 'test_channel_part2'>, <Function 'test_channel_part3'>, <Function 'test_channel_part4'>, <Function 'test_channel_part5'>, <Function 'test_channel_part6'>, <Function 'test_channel_part7'>, <Function 'test_channel_part8'>, <Function 'test_channel_part9'>, <Function 'test_channel_part_nochannel1'>, <Function 'test_channel_part_nochannel2'>, <Function 'test_channel_part_notonchannel1'>, <Function 'test_channel_part_notonchannel2'>, <Function 'test_topic1'>, <Function 'test_topic2'>, <Function 'test_topic3'>, <Function 'test_topic4'>, <Function 'test_topic5'>, <Function 'test_topic6'>, <Function 'test_topic7'>, <Function 'test_topic8'>, <Function 'test_topic9'>, <Function 'test_topic10'>, <Function 'test_names1'>, <Function 'test_names2'>, <Function 'test_names3'>, <Function 'test_names4'>, <Function 'test_names5'>, <Function 'test_names6'>, <Function 'test_names7'>, <Function 'test_names8'>, <Function 'test_names9'>, <Function 'test_names10'>, <Function 'test_names11'>, <Function 'test_list1'>, <Function 'test_list2'>, <Function 'test_list3'>, <Function 'test_list4'>, <Function 'test_list5'>, <Function 'test_who1'>, <Function 'test_who2'>, <Function 'test_who3'>, <Function 'test_who4'>, <Function 'test_who5'>, <Function 'test_who6'>, <Function 'test_update1b_nick'>, <Function 'test_update1b_quit1'>, <Function 'test_update1b_quit2'>, <Function 'test_connect_simple'>, <Function 'test_connect_both_messages_at_once'>, <Function 'test_connect_partitioned_messages1'>, <Function 'test_connect_partitioned_messages2'>, <Function 'test_connect_partitioned_messages3'>, <Function 'test_connect_partitioned_messages4'>, <Function 'test_connect_partitioned_messages5'>, <Function 'test_connect_partitioned_messages6'>, <Function 'test_connect_partitioned_messages7'>, <Function 'test_connect_nick_user_parsing1'>, <Function 'test_connect_nick_user_parsing2'>, <Function 'test_connect_nick_user_parsing3'>, <Function 'test_connect_no_unexpected_welcome1'>, <Function 'test_connect_no_unexpected_welcome2'>, <Function 'test_connect_no_unexpected_welcome3'>, <Function 'test_connect_full1'>, <Function 'test_connect_full2'>, <Function 'test_connect_full3'>, <Function 'test_connect_2users'>, <Function 'test_connect_duplicate_nick'>, <Function 'test_connect_lusers_motd1'>, <Function 'test_connect_lusers_motd2'>, <Function 'test_connect_lusers_motd_2users'>, <Function 'test_connect_lusers_motd_unknown'>, <Function 'test_connect_lusers_motd_unknown2'>, <Function 'test_connect_lusers_motd_unknown3'>, <Function 'test_lusers'>, <Function 'test_motd1'>, <Function 'test_motd2'>, <Function 'test_oper1'>, <Function 'test_oper2'>, <Function 'test_user_mode1'>, <Function 'test_user_mode2'>, <Function 'test_user_mode3'>, <Function 'test_user_mode4'>, <Function 'test_user_mode5'>, <Function 'test_user_mode6'>, <Function 'test_user_mode7'>, <Function 'test_user_mode8'>, <Function 'test_user_mode9'>, <Function 'test_user_mode10'>, <Function 'test_user_mode11'>, <Function 'test_user_mode12'>, <Function 'test_channel_mode1'>, <Function 'test_channel_mode2'>, <Function 'test_channel_mode3'>, <Function 'test_channel_mode4'>, <Function 'test_channel_mode5'>, <Function 'test_channel_mode6'>, <Function 'test_channel_mode7'>, <Function 'test_channel_mode8'>, <Function 'test_channel_mode9'>, <Function 'test_channel_mode10'>, <Function 'test_channel_mode11'>, <Function 'test_channel_mode12'>, <Function 'test_channel_mode13'>, <Function 'test_channel_mode14'>, <Function 'test_channel_mode15'>, <Function 'test_channel_mode16'>, <Function 'test_channel_mode17'>, <Function 'test_channel_mode18'>, <Function 'test_channeluser_mode1'>, <Function 'test_channeluser_mode2'>, <Function 'test_channeluser_mode3'>, <Function 'test_channeluser_mode4'>, <Function 'test_channeluser_mode5'>, <Function 'test_channeluser_mode6'>, <Function 'test_channeluser_mode7'>, <Function 'test_channeluser_mode8'>, <Function 'test_channeluser_mode9'>, <Function 'test_channeluser_mode10'>, <Function 'test_connect_channels1'>, <Function 'test_connect_channels2'>, <Function 'test_connect_channels3'>, <Function 'test_permissions_privmsg1'>, <Function 'test_permissions_privmsg2'>, <Function 'test_permissions_privmsg3'>, <Function 'test_permissions_privmsg4'>, <Function 'test_permissions_privmsg5'>, <Function 'test_permissions_notice'>, <Function 'test_permissions_topic1'>, <Function 'test_permissions_topic2'>, <Function 'test_permissions_oper1'>, <Function 'test_permissions_oper2'>, <Function 'test_permissions_oper3'>, <Function 'test_permissions_oper4'>, <Function 'test_permissions_oper5'>, <Function 'test_permissions_oper6'>, <Function 'test_away1'>, <Function 'test_away2'>, <Function 'test_away3'>, <Function 'test_away4'>, <Function 'test_away5'>, <Function 'test_away6'>, <Function 'test_ping'>, <Function 'test_multiping1'>, <Function 'test_multiping2'>, <Function 'test_multiping3'>, <Function 'test_multiping4'>, <Function 'test_pong'>, <Function 'test_privmsg1'>, <Function 'test_privmsg2'>, <Function 'test_privmsg_multiple1'>, <Function 'test_privmsg_multiple2'>, <Function 'test_privmsg_multiple3'>, <Function 'test_privmsg_multiple4'>, <Function 'test_privmsg_multiple5'>, <Function 'test_privmsg_nonick'>, <Function 'test_notice'>, <Function 'test_notice_nonick'>, <Function 'test_whitespace1'>, <Function 'test_whitespace2'>, <Function 'test_whitespace3'>, <Function 'test_whitespace4'>, <Function 'test_whitespace5'>, <Function 'test_length1'>, <Function 'test_length2'>, <Function 'test_length3'>, <Function 'test_length4'>, <Function 'test_unknown1'>, <Function 'test_unknown2'>, <Function 'test_unknown3'>, <Function 'test_whois1'>, <Function 'test_whois_nonick'>, <Function 'test_whois2'>, <Function 'test_whois3'>]
          config: <_pytest.config.Config object at 0x10322b128>
          session: <Session 'chirc'>
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session 'chirc'>
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<Function 'test_join1'>, <Function 'test_join2'>, <Function 'test_join3'>, <Function 'test_join4'>, <Function 'test_join5'>, <Function 'test_channel_privmsg1'>, <Function 'test_channel_privmsg2'>, <Function 'test_channel_privmsg3'>, <Function 'test_channel_privmsg_nochannel'>, <Function 'test_channel_privmsg_notonchannel'>, <Function 'test_channel_notice_nochannel'>, <Function 'test_channel_part1'>, <Function 'test_channel_part2'>, <Function 'test_channel_part3'>, <Function 'test_channel_part4'>, <Function 'test_channel_part5'>, <Function 'test_channel_part6'>, <Function 'test_channel_part7'>, <Function 'test_channel_part8'>, <Function 'test_channel_part9'>, <Function 'test_channel_part_nochannel1'>, <Function 'test_channel_part_nochannel2'>, <Function 'test_channel_part_notonchannel1'>, <Function 'test_channel_part_notonchannel2'>, <Function 'test_topic1'>, <Function 'test_topic2'>, <Function 'test_topic3'>, <Function 'test_topic4'>, <Function 'test_topic5'>, <Function 'test_topic6'>, <Function 'test_topic7'>, <Function 'test_topic8'>, <Function 'test_topic9'>, <Function 'test_topic10'>, <Function 'test_names1'>, <Function 'test_names2'>, <Function 'test_names3'>, <Function 'test_names4'>, <Function 'test_names5'>, <Function 'test_names6'>, <Function 'test_names7'>, <Function 'test_names8'>, <Function 'test_names9'>, <Function 'test_names10'>, <Function 'test_names11'>, <Function 'test_list1'>, <Function 'test_list2'>, <Function 'test_list3'>, <Function 'test_list4'>, <Function 'test_list5'>, <Function 'test_who1'>, <Function 'test_who2'>, <Function 'test_who3'>, <Function 'test_who4'>, <Function 'test_who5'>, <Function 'test_who6'>, <Function 'test_update1b_nick'>, <Function 'test_update1b_quit1'>, <Function 'test_update1b_quit2'>, <Function 'test_connect_simple'>, <Function 'test_connect_both_messages_at_once'>, <Function 'test_connect_partitioned_messages1'>, <Function 'test_connect_partitioned_messages2'>, <Function 'test_connect_partitioned_messages3'>, <Function 'test_connect_partitioned_messages4'>, <Function 'test_connect_partitioned_messages5'>, <Function 'test_connect_partitioned_messages6'>, <Function 'test_connect_partitioned_messages7'>, <Function 'test_connect_nick_user_parsing1'>, <Function 'test_connect_nick_user_parsing2'>, <Function 'test_connect_nick_user_parsing3'>, <Function 'test_connect_no_unexpected_welcome1'>, <Function 'test_connect_no_unexpected_welcome2'>, <Function 'test_connect_no_unexpected_welcome3'>, <Function 'test_connect_full1'>, <Function 'test_connect_full2'>, <Function 'test_connect_full3'>, <Function 'test_connect_2users'>, <Function 'test_connect_duplicate_nick'>, <Function 'test_connect_lusers_motd1'>, <Function 'test_connect_lusers_motd2'>, <Function 'test_connect_lusers_motd_2users'>, <Function 'test_connect_lusers_motd_unknown'>, <Function 'test_connect_lusers_motd_unknown2'>, <Function 'test_connect_lusers_motd_unknown3'>, <Function 'test_lusers'>, <Function 'test_motd1'>, <Function 'test_motd2'>, <Function 'test_oper1'>, <Function 'test_oper2'>, <Function 'test_user_mode1'>, <Function 'test_user_mode2'>, <Function 'test_user_mode3'>, <Function 'test_user_mode4'>, <Function 'test_user_mode5'>, <Function 'test_user_mode6'>, <Function 'test_user_mode7'>, <Function 'test_user_mode8'>, <Function 'test_user_mode9'>, <Function 'test_user_mode10'>, <Function 'test_user_mode11'>, <Function 'test_user_mode12'>, <Function 'test_channel_mode1'>, <Function 'test_channel_mode2'>, <Function 'test_channel_mode3'>, <Function 'test_channel_mode4'>, <Function 'test_channel_mode5'>, <Function 'test_channel_mode6'>, <Function 'test_channel_mode7'>, <Function 'test_channel_mode8'>, <Function 'test_channel_mode9'>, <Function 'test_channel_mode10'>, <Function 'test_channel_mode11'>, <Function 'test_channel_mode12'>, <Function 'test_channel_mode13'>, <Function 'test_channel_mode14'>, <Function 'test_channel_mode15'>, <Function 'test_channel_mode16'>, <Function 'test_channel_mode17'>, <Function 'test_channel_mode18'>, <Function 'test_channeluser_mode1'>, <Function 'test_channeluser_mode2'>, <Function 'test_channeluser_mode3'>, <Function 'test_channeluser_mode4'>, <Function 'test_channeluser_mode5'>, <Function 'test_channeluser_mode6'>, <Function 'test_channeluser_mode7'>, <Function 'test_channeluser_mode8'>, <Function 'test_channeluser_mode9'>, <Function 'test_channeluser_mode10'>, <Function 'test_connect_channels1'>, <Function 'test_connect_channels2'>, <Function 'test_connect_channels3'>, <Function 'test_permissions_privmsg1'>, <Function 'test_permissions_privmsg2'>, <Function 'test_permissions_privmsg3'>, <Function 'test_permissions_privmsg4'>, <Function 'test_permissions_privmsg5'>, <Function 'test_permissions_notice'>, <Function 'test_permissions_topic1'>, <Function 'test_permissions_topic2'>, <Function 'test_permissions_oper1'>, <Function 'test_permissions_oper2'>, <Function 'test_permissions_oper3'>, <Function 'test_permissions_oper4'>, <Function 'test_permissions_oper5'>, <Function 'test_permissions_oper6'>, <Function 'test_away1'>, <Function 'test_away2'>, <Function 'test_away3'>, <Function 'test_away4'>, <Function 'test_away5'>, <Function 'test_away6'>, <Function 'test_ping'>, <Function 'test_multiping1'>, <Function 'test_multiping2'>, <Function 'test_multiping3'>, <Function 'test_multiping4'>, <Function 'test_pong'>, <Function 'test_privmsg1'>, <Function 'test_privmsg2'>, <Function 'test_privmsg_multiple1'>, <Function 'test_privmsg_multiple2'>, <Function 'test_privmsg_multiple3'>, <Function 'test_privmsg_multiple4'>, <Function 'test_privmsg_multiple5'>, <Function 'test_privmsg_nonick'>, <Function 'test_notice'>, <Function 'test_notice_nonick'>, <Function 'test_whitespace1'>, <Function 'test_whitespace2'>, <Function 'test_whitespace3'>, <Function 'test_whitespace4'>, <Function 'test_whitespace5'>, <Function 'test_length1'>, <Function 'test_length2'>, <Function 'test_length3'>, <Function 'test_length4'>, <Function 'test_unknown1'>, <Function 'test_unknown2'>, <Function 'test_unknown3'>, <Function 'test_whois1'>, <Function 'test_whois_nonick'>, <Function 'test_whois2'>, <Function 'test_whois3'>] [hook]
    pytest_runtestloop [hook]
        session: <Session 'chirc'>
      pytest_runtest_protocol [hook]
          item: <Function 'test_join1'>
          nextitem: <Function 'test_join2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 9, 'TestJOIN.test_join1')
            nodeid: tests/chirc/tests/test_channel.py::TestJOIN::()::test_join1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_join1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_join1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_join1'>
            nextitem: <Function 'test_join2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_join1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_join2'>
          nextitem: <Function 'test_join3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 17, 'TestJOIN.test_join2')
            nodeid: tests/chirc/tests/test_channel.py::TestJOIN::()::test_join2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_join2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_join2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_join2'>
            nextitem: <Function 'test_join3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_join2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_join3'>
          nextitem: <Function 'test_join4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 29, 'TestJOIN.test_join3')
            nodeid: tests/chirc/tests/test_channel.py::TestJOIN::()::test_join3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_join3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_join3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_join3'>
            nextitem: <Function 'test_join4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_join3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_join4'>
          nextitem: <Function 'test_join5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 37, 'TestJOIN.test_join4')
            nodeid: tests/chirc/tests/test_channel.py::TestJOIN::()::test_join4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_join4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_join4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_join4'>
            nextitem: <Function 'test_join5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_join4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_join5'>
          nextitem: <Function 'test_channel_privmsg1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 51, 'TestJOIN.test_join5')
            nodeid: tests/chirc/tests/test_channel.py::TestJOIN::()::test_join5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_join5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_join5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_join5'>
            nextitem: <Function 'test_channel_privmsg1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_join5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestJOIN::()::test_join5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_privmsg1'>
          nextitem: <Function 'test_channel_privmsg2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 79, 'TestChannelPRIVMSG.test_channel_privmsg1')
            nodeid: tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_privmsg1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_privmsg1'>
            nextitem: <Function 'test_channel_privmsg2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_privmsg2'>
          nextitem: <Function 'test_channel_privmsg3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 83, 'TestChannelPRIVMSG.test_channel_privmsg2')
            nodeid: tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_privmsg2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_privmsg2'>
            nextitem: <Function 'test_channel_privmsg3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_privmsg3'>
          nextitem: <Function 'test_channel_privmsg_nochannel'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 87, 'TestChannelPRIVMSG.test_channel_privmsg3')
            nodeid: tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_privmsg3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_privmsg3'>
            nextitem: <Function 'test_channel_privmsg_nochannel'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_privmsg_nochannel'>
          nextitem: <Function 'test_channel_privmsg_notonchannel'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 91, 'TestChannelPRIVMSG.test_channel_privmsg_nochannel')
            nodeid: tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_nochannel
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_privmsg_nochannel'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg_nochannel'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_nochannel' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_nochannel' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_nochannel' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_privmsg_nochannel'>
            nextitem: <Function 'test_channel_privmsg_notonchannel'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg_nochannel'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_nochannel' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_nochannel' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_nochannel' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_privmsg_notonchannel'>
          nextitem: <Function 'test_channel_notice_nochannel'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 101, 'TestChannelPRIVMSG.test_channel_privmsg_notonchannel')
            nodeid: tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_notonchannel
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_privmsg_notonchannel'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg_notonchannel'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_notonchannel' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_notonchannel' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_notonchannel' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_privmsg_notonchannel'>
            nextitem: <Function 'test_channel_notice_nochannel'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_privmsg_notonchannel'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_notonchannel' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_notonchannel' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_notonchannel' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_notice_nochannel'>
          nextitem: <Function 'test_channel_part1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 119, 'TestChannelNOTICE.test_channel_notice_nochannel')
            nodeid: tests/chirc/tests/test_channel.py::TestChannelNOTICE::()::test_channel_notice_nochannel
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_notice_nochannel'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_notice_nochannel'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE::()::test_channel_notice_nochannel' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE::()::test_channel_notice_nochannel' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE::()::test_channel_notice_nochannel' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_notice_nochannel'>
            nextitem: <Function 'test_channel_part1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_notice_nochannel'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE::()::test_channel_notice_nochannel' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE::()::test_channel_notice_nochannel' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelNOTICE::()::test_channel_notice_nochannel' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part1'>
          nextitem: <Function 'test_channel_part2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 141, 'TestPART.test_channel_part1')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part1'>
            nextitem: <Function 'test_channel_part2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part2'>
          nextitem: <Function 'test_channel_part3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 152, 'TestPART.test_channel_part2')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part2'>
            nextitem: <Function 'test_channel_part3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part3'>
          nextitem: <Function 'test_channel_part4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 163, 'TestPART.test_channel_part3')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part3'>
            nextitem: <Function 'test_channel_part4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part4'>
          nextitem: <Function 'test_channel_part5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 181, 'TestPART.test_channel_part4')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part4'>
            nextitem: <Function 'test_channel_part5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part5'>
          nextitem: <Function 'test_channel_part6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 185, 'TestPART.test_channel_part5')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part5'>
            nextitem: <Function 'test_channel_part6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part6'>
          nextitem: <Function 'test_channel_part7'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 189, 'TestPART.test_channel_part6')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part6'>
            nextitem: <Function 'test_channel_part7'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part7'>
          nextitem: <Function 'test_channel_part8'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 193, 'TestPART.test_channel_part7')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part7
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part7'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part7'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part7' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part7' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part7' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part7'>
            nextitem: <Function 'test_channel_part8'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part7'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part7' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part7' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part7' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part8'>
          nextitem: <Function 'test_channel_part9'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 197, 'TestPART.test_channel_part8')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part8
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part8'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part8'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part8' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part8' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part8' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part8'>
            nextitem: <Function 'test_channel_part9'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part8'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part8' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part8' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part8' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part9'>
          nextitem: <Function 'test_channel_part_nochannel1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 201, 'TestPART.test_channel_part9')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part9
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part9'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part9'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part9' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part9' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part9' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part9'>
            nextitem: <Function 'test_channel_part_nochannel1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part9'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part9' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part9' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part9' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part_nochannel1'>
          nextitem: <Function 'test_channel_part_nochannel2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 205, 'TestPART.test_channel_part_nochannel1')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part_nochannel1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part_nochannel1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part_nochannel1'>
            nextitem: <Function 'test_channel_part_nochannel2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part_nochannel1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part_nochannel2'>
          nextitem: <Function 'test_channel_part_notonchannel1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 215, 'TestPART.test_channel_part_nochannel2')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part_nochannel2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part_nochannel2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part_nochannel2'>
            nextitem: <Function 'test_channel_part_notonchannel1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part_nochannel2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part_notonchannel1'>
          nextitem: <Function 'test_channel_part_notonchannel2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 228, 'TestPART.test_channel_part_notonchannel1')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part_notonchannel1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part_notonchannel1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part_notonchannel1'>
            nextitem: <Function 'test_channel_part_notonchannel2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part_notonchannel1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_part_notonchannel2'>
          nextitem: <Function 'test_topic1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 242, 'TestPART.test_channel_part_notonchannel2')
            nodeid: tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_part_notonchannel2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part_notonchannel2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_part_notonchannel2'>
            nextitem: <Function 'test_topic1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_part_notonchannel2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic1'>
          nextitem: <Function 'test_topic2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 258, 'TestTOPIC.test_topic1')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic1'>
            nextitem: <Function 'test_topic2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic2'>
          nextitem: <Function 'test_topic3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 272, 'TestTOPIC.test_topic2')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic2'>
            nextitem: <Function 'test_topic3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic3'>
          nextitem: <Function 'test_topic4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 292, 'TestTOPIC.test_topic3')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic3'>
            nextitem: <Function 'test_topic4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic4'>
          nextitem: <Function 'test_topic5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 306, 'TestTOPIC.test_topic4')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic4'>
            nextitem: <Function 'test_topic5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic5'>
          nextitem: <Function 'test_topic6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 316, 'TestTOPIC.test_topic5')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic5'>
            nextitem: <Function 'test_topic6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic6'>
          nextitem: <Function 'test_topic7'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 326, 'TestTOPIC.test_topic6')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic6'>
            nextitem: <Function 'test_topic7'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic7'>
          nextitem: <Function 'test_topic8'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 339, 'TestTOPIC.test_topic7')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic7
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic7'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic7'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic7' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic7' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic7' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic7'>
            nextitem: <Function 'test_topic8'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic7'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic7' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic7' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic7' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic8'>
          nextitem: <Function 'test_topic9'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 355, 'TestTOPIC.test_topic8')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic8
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic8'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic8'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic8' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic8' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic8' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic8'>
            nextitem: <Function 'test_topic9'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic8'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic8' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic8' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic8' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic9'>
          nextitem: <Function 'test_topic10'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 369, 'TestTOPIC.test_topic9')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic9
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic9'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic9'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic9' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic9' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic9' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic9'>
            nextitem: <Function 'test_topic10'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic9'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic9' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic9' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic9' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_topic10'>
          nextitem: <Function 'test_names1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 381, 'TestTOPIC.test_topic10')
            nodeid: tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic10
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_topic10'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic10'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic10' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic10' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic10' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_topic10'>
            nextitem: <Function 'test_names1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_topic10'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic10' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic10' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic10' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names1'>
          nextitem: <Function 'test_names2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 437, 'TestNAMES.test_names1')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names1'>
            nextitem: <Function 'test_names2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names2'>
          nextitem: <Function 'test_names3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 441, 'TestNAMES.test_names2')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names2'>
            nextitem: <Function 'test_names3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names3'>
          nextitem: <Function 'test_names4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 445, 'TestNAMES.test_names3')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names3'>
            nextitem: <Function 'test_names4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names4'>
          nextitem: <Function 'test_names5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 450, 'TestNAMES.test_names4')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names4'>
            nextitem: <Function 'test_names5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names5'>
          nextitem: <Function 'test_names6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 456, 'TestNAMES.test_names5')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names5'>
            nextitem: <Function 'test_names6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names6'>
          nextitem: <Function 'test_names7'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 462, 'TestNAMES.test_names6')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names6'>
            nextitem: <Function 'test_names7'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names7'>
          nextitem: <Function 'test_names8'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 469, 'TestNAMES.test_names7')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names7
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names7'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names7'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names7' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names7' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names7' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names7'>
            nextitem: <Function 'test_names8'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names7'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names7' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names7' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names7' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names8'>
          nextitem: <Function 'test_names9'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 475, 'TestNAMES.test_names8')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names8
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names8'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names8'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names8' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names8' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names8' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names8'>
            nextitem: <Function 'test_names9'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names8'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names8' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names8' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names8' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names9'>
          nextitem: <Function 'test_names10'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 481, 'TestNAMES.test_names9')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names9
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names9'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names9'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names9' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names9' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names9' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names9'>
            nextitem: <Function 'test_names10'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names9'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names9' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names9' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names9' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names10'>
          nextitem: <Function 'test_names11'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 487, 'TestNAMES.test_names10')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names10
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names10'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names10'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names10' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names10' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names10' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names10'>
            nextitem: <Function 'test_names11'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names10'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names10' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names10' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names10' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_names11'>
          nextitem: <Function 'test_list1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 494, 'TestNAMES.test_names11')
            nodeid: tests/chirc/tests/test_channel.py::TestNAMES::()::test_names11
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_names11'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_names11'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names11' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names11' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names11' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_names11'>
            nextitem: <Function 'test_list1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_names11'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names11' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names11' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestNAMES::()::test_names11' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_list1'>
          nextitem: <Function 'test_list2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 542, 'TestLIST.test_list1')
            nodeid: tests/chirc/tests/test_channel.py::TestLIST::()::test_list1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_list1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_list1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_list1'>
            nextitem: <Function 'test_list2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_list1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_list2'>
          nextitem: <Function 'test_list3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 548, 'TestLIST.test_list2')
            nodeid: tests/chirc/tests/test_channel.py::TestLIST::()::test_list2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_list2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_list2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_list2'>
            nextitem: <Function 'test_list3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_list2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_list3'>
          nextitem: <Function 'test_list4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 554, 'TestLIST.test_list3')
            nodeid: tests/chirc/tests/test_channel.py::TestLIST::()::test_list3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_list3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_list3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_list3'>
            nextitem: <Function 'test_list4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_list3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_list4'>
          nextitem: <Function 'test_list5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 560, 'TestLIST.test_list4')
            nodeid: tests/chirc/tests/test_channel.py::TestLIST::()::test_list4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_list4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_list4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_list4'>
            nextitem: <Function 'test_list5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_list4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_list5'>
          nextitem: <Function 'test_who1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 567, 'TestLIST.test_list5')
            nodeid: tests/chirc/tests/test_channel.py::TestLIST::()::test_list5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_list5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_list5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_list5'>
            nextitem: <Function 'test_who1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_list5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestLIST::()::test_list5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_who1'>
          nextitem: <Function 'test_who2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 682, 'TestWHO.test_who1')
            nodeid: tests/chirc/tests/test_channel.py::TestWHO::()::test_who1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_who1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_who1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_who1'>
            nextitem: <Function 'test_who2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_who1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_who2'>
          nextitem: <Function 'test_who3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 690, 'TestWHO.test_who2')
            nodeid: tests/chirc/tests/test_channel.py::TestWHO::()::test_who2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_who2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_who2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_who2'>
            nextitem: <Function 'test_who3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_who2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_who3'>
          nextitem: <Function 'test_who4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 698, 'TestWHO.test_who3')
            nodeid: tests/chirc/tests/test_channel.py::TestWHO::()::test_who3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_who3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_who3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_who3'>
            nextitem: <Function 'test_who4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_who3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_who4'>
          nextitem: <Function 'test_who5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 707, 'TestWHO.test_who4')
            nodeid: tests/chirc/tests/test_channel.py::TestWHO::()::test_who4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_who4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_who4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_who4'>
            nextitem: <Function 'test_who5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_who4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_who5'>
          nextitem: <Function 'test_who6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 718, 'TestWHO.test_who5')
            nodeid: tests/chirc/tests/test_channel.py::TestWHO::()::test_who5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_who5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_who5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_who5'>
            nextitem: <Function 'test_who6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_who5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_who6'>
          nextitem: <Function 'test_update1b_nick'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 730, 'TestWHO.test_who6')
            nodeid: tests/chirc/tests/test_channel.py::TestWHO::()::test_who6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_who6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_who6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_who6'>
            nextitem: <Function 'test_update1b_nick'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_who6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestWHO::()::test_who6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_update1b_nick'>
          nextitem: <Function 'test_update1b_quit1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 747, 'TestChannelUPDATE1b.test_update1b_nick')
            nodeid: tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_nick
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_update1b_nick'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_update1b_nick'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_nick' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_nick' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_nick' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_update1b_nick'>
            nextitem: <Function 'test_update1b_quit1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_update1b_nick'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_nick' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_nick' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_nick' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_update1b_quit1'>
          nextitem: <Function 'test_update1b_quit2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 758, 'TestChannelUPDATE1b.test_update1b_quit1')
            nodeid: tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_update1b_quit1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_update1b_quit1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_update1b_quit1'>
            nextitem: <Function 'test_update1b_quit2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_update1b_quit1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_update1b_quit2'>
          nextitem: <Function 'test_connect_simple'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_channel.py', 769, 'TestChannelUPDATE1b.test_update1b_quit2')
            nodeid: tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_update1b_quit2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_update1b_quit2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_update1b_quit2'>
            nextitem: <Function 'test_connect_simple'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_update1b_quit2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_channel.py::TestChannelUPDATE1b::()::test_update1b_quit2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_simple'>
          nextitem: <Function 'test_connect_both_messages_at_once'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 7, 'TestBasicConnection.test_connect_simple')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_simple'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_simple'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_simple'>
            nextitem: <Function 'test_connect_both_messages_at_once'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_simple'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_both_messages_at_once'>
          nextitem: <Function 'test_connect_partitioned_messages1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 17, 'TestBasicConnection.test_connect_both_messages_at_once')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_both_messages_at_once'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_both_messages_at_once'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_both_messages_at_once'>
            nextitem: <Function 'test_connect_partitioned_messages1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_both_messages_at_once'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_partitioned_messages1'>
          nextitem: <Function 'test_connect_partitioned_messages2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 24, 'TestBasicConnection.test_connect_partitioned_messages1')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_partitioned_messages1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_partitioned_messages1'>
            nextitem: <Function 'test_connect_partitioned_messages2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_partitioned_messages2'>
          nextitem: <Function 'test_connect_partitioned_messages3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 33, 'TestBasicConnection.test_connect_partitioned_messages2')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_partitioned_messages2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_partitioned_messages2'>
            nextitem: <Function 'test_connect_partitioned_messages3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_partitioned_messages3'>
          nextitem: <Function 'test_connect_partitioned_messages4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 42, 'TestBasicConnection.test_connect_partitioned_messages3')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_partitioned_messages3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_partitioned_messages3'>
            nextitem: <Function 'test_connect_partitioned_messages4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_partitioned_messages4'>
          nextitem: <Function 'test_connect_partitioned_messages5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 51, 'TestBasicConnection.test_connect_partitioned_messages4')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_partitioned_messages4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_partitioned_messages4'>
            nextitem: <Function 'test_connect_partitioned_messages5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_partitioned_messages5'>
          nextitem: <Function 'test_connect_partitioned_messages6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 60, 'TestBasicConnection.test_connect_partitioned_messages5')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_partitioned_messages5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_partitioned_messages5'>
            nextitem: <Function 'test_connect_partitioned_messages6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_partitioned_messages6'>
          nextitem: <Function 'test_connect_partitioned_messages7'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 71, 'TestBasicConnection.test_connect_partitioned_messages6')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_partitioned_messages6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_partitioned_messages6'>
            nextitem: <Function 'test_connect_partitioned_messages7'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_partitioned_messages7'>
          nextitem: <Function 'test_connect_nick_user_parsing1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 81, 'TestBasicConnection.test_connect_partitioned_messages7')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_partitioned_messages7'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages7'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_partitioned_messages7'>
            nextitem: <Function 'test_connect_nick_user_parsing1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_partitioned_messages7'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_nick_user_parsing1'>
          nextitem: <Function 'test_connect_nick_user_parsing2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 99, 'TestBasicConnection.test_connect_nick_user_parsing1')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_nick_user_parsing1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_nick_user_parsing1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_nick_user_parsing1'>
            nextitem: <Function 'test_connect_nick_user_parsing2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_nick_user_parsing1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_nick_user_parsing2'>
          nextitem: <Function 'test_connect_nick_user_parsing3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 109, 'TestBasicConnection.test_connect_nick_user_parsing2')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_nick_user_parsing2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_nick_user_parsing2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_nick_user_parsing2'>
            nextitem: <Function 'test_connect_nick_user_parsing3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_nick_user_parsing2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_nick_user_parsing3'>
          nextitem: <Function 'test_connect_no_unexpected_welcome1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 121, 'TestBasicConnection.test_connect_nick_user_parsing3')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_nick_user_parsing3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_nick_user_parsing3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_nick_user_parsing3'>
            nextitem: <Function 'test_connect_no_unexpected_welcome1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_nick_user_parsing3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_no_unexpected_welcome1'>
          nextitem: <Function 'test_connect_no_unexpected_welcome2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 139, 'TestBasicConnection.test_connect_no_unexpected_welcome1')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_no_unexpected_welcome1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_no_unexpected_welcome1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_no_unexpected_welcome1'>
            nextitem: <Function 'test_connect_no_unexpected_welcome2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_no_unexpected_welcome1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_no_unexpected_welcome2'>
          nextitem: <Function 'test_connect_no_unexpected_welcome3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 147, 'TestBasicConnection.test_connect_no_unexpected_welcome2')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_no_unexpected_welcome2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_no_unexpected_welcome2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_no_unexpected_welcome2'>
            nextitem: <Function 'test_connect_no_unexpected_welcome3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_no_unexpected_welcome2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_no_unexpected_welcome3'>
          nextitem: <Function 'test_connect_full1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 155, 'TestBasicConnection.test_connect_no_unexpected_welcome3')
            nodeid: tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_no_unexpected_welcome3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_no_unexpected_welcome3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_no_unexpected_welcome3'>
            nextitem: <Function 'test_connect_full1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_no_unexpected_welcome3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_full1'>
          nextitem: <Function 'test_connect_full2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 169, 'TestFullConnection.test_connect_full1')
            nodeid: tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_full1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_full1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_full1'>
            nextitem: <Function 'test_connect_full2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_full1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_full2'>
          nextitem: <Function 'test_connect_full3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 177, 'TestFullConnection.test_connect_full2')
            nodeid: tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_full2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_full2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_full2'>
            nextitem: <Function 'test_connect_full3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_full2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_full3'>
          nextitem: <Function 'test_connect_2users'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 185, 'TestFullConnection.test_connect_full3')
            nodeid: tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_full3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_full3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_full3'>
            nextitem: <Function 'test_connect_2users'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_full3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_2users'>
          nextitem: <Function 'test_connect_duplicate_nick'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 199, 'TestMultiuserConnection.test_connect_2users')
            nodeid: tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_2users'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_2users'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_2users'>
            nextitem: <Function 'test_connect_duplicate_nick'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_2users'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_duplicate_nick'>
          nextitem: <Function 'test_connect_lusers_motd1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_connection.py', 203, 'TestMultiuserConnection.test_connect_duplicate_nick')
            nodeid: tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_duplicate_nick'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_duplicate_nick'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_duplicate_nick'>
            nextitem: <Function 'test_connect_lusers_motd1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_duplicate_nick'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_lusers_motd1'>
          nextitem: <Function 'test_connect_lusers_motd2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_lusers_motd.py', 6, 'TestConnectionWithLUSERSMOTD.test_connect_lusers_motd1')
            nodeid: tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_lusers_motd1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_lusers_motd1'>
            nextitem: <Function 'test_connect_lusers_motd2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_lusers_motd2'>
          nextitem: <Function 'test_connect_lusers_motd_2users'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_lusers_motd.py', 22, 'TestConnectionWithLUSERSMOTD.test_connect_lusers_motd2')
            nodeid: tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_lusers_motd2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_lusers_motd2'>
            nextitem: <Function 'test_connect_lusers_motd_2users'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_lusers_motd_2users'>
          nextitem: <Function 'test_connect_lusers_motd_unknown'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_lusers_motd.py', 39, 'TestConnectionWithLUSERSMOTD.test_connect_lusers_motd_2users')
            nodeid: tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_2users
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_lusers_motd_2users'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd_2users'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_2users' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_2users' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_2users' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_lusers_motd_2users'>
            nextitem: <Function 'test_connect_lusers_motd_unknown'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd_2users'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_2users' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_2users' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_2users' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_lusers_motd_unknown'>
          nextitem: <Function 'test_connect_lusers_motd_unknown2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_lusers_motd.py', 68, 'TestConnectionWithLUSERSMOTD.test_connect_lusers_motd_unknown')
            nodeid: tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_lusers_motd_unknown'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd_unknown'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_lusers_motd_unknown'>
            nextitem: <Function 'test_connect_lusers_motd_unknown2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd_unknown'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_lusers_motd_unknown2'>
          nextitem: <Function 'test_connect_lusers_motd_unknown3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_lusers_motd.py', 87, 'TestConnectionWithLUSERSMOTD.test_connect_lusers_motd_unknown2')
            nodeid: tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_lusers_motd_unknown2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd_unknown2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_lusers_motd_unknown2'>
            nextitem: <Function 'test_connect_lusers_motd_unknown3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd_unknown2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_lusers_motd_unknown3'>
          nextitem: <Function 'test_lusers'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_lusers_motd.py', 105, 'TestConnectionWithLUSERSMOTD.test_connect_lusers_motd_unknown3')
            nodeid: tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_lusers_motd_unknown3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd_unknown3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_lusers_motd_unknown3'>
            nextitem: <Function 'test_lusers'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_lusers_motd_unknown3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_lusers'>
          nextitem: <Function 'test_motd1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_lusers_motd.py', 130, 'TestLUSERS.test_lusers')
            nodeid: tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_lusers'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_lusers'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_lusers'>
            nextitem: <Function 'test_motd1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_lusers'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_motd1'>
          nextitem: <Function 'test_motd2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_lusers_motd.py', 144, 'TestMOTD.test_motd1')
            nodeid: tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_motd1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_motd1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_motd1'>
            nextitem: <Function 'test_motd2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_motd1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_motd2'>
          nextitem: <Function 'test_oper1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_lusers_motd.py', 159, 'TestMOTD.test_motd2')
            nodeid: tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_motd2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_motd2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_motd2'>
            nextitem: <Function 'test_oper1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_motd2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_oper1'>
          nextitem: <Function 'test_oper2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 8, 'TestOPER.test_oper1')
            nodeid: tests/chirc/tests/test_modes.py::TestOPER::()::test_oper1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_oper1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_oper1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_oper1'>
            nextitem: <Function 'test_oper2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_oper1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_oper2'>
          nextitem: <Function 'test_user_mode1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 17, 'TestOPER.test_oper2')
            nodeid: tests/chirc/tests/test_modes.py::TestOPER::()::test_oper2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_oper2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_oper2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_oper2'>
            nextitem: <Function 'test_user_mode1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_oper2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestOPER::()::test_oper2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode1'>
          nextitem: <Function 'test_user_mode2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 29, 'TestMODE.test_user_mode1')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode1'>
            nextitem: <Function 'test_user_mode2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode2'>
          nextitem: <Function 'test_user_mode3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 34, 'TestMODE.test_user_mode2')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode2'>
            nextitem: <Function 'test_user_mode3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode3'>
          nextitem: <Function 'test_user_mode4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 39, 'TestMODE.test_user_mode3')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode3'>
            nextitem: <Function 'test_user_mode4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode4'>
          nextitem: <Function 'test_user_mode5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 44, 'TestMODE.test_user_mode4')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode4'>
            nextitem: <Function 'test_user_mode5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode5'>
          nextitem: <Function 'test_user_mode6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 49, 'TestMODE.test_user_mode5')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode5'>
            nextitem: <Function 'test_user_mode6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode6'>
          nextitem: <Function 'test_user_mode7'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 54, 'TestMODE.test_user_mode6')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode6'>
            nextitem: <Function 'test_user_mode7'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode7'>
          nextitem: <Function 'test_user_mode8'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 59, 'TestMODE.test_user_mode7')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode7
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode7'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode7'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode7' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode7' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode7' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode7'>
            nextitem: <Function 'test_user_mode8'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode7'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode7' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode7' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode7' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode8'>
          nextitem: <Function 'test_user_mode9'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 64, 'TestMODE.test_user_mode8')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode8
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode8'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode8'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode8' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode8' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode8' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode8'>
            nextitem: <Function 'test_user_mode9'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode8'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode8' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode8' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode8' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode9'>
          nextitem: <Function 'test_user_mode10'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 69, 'TestMODE.test_user_mode9')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode9
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode9'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode9'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode9' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode9' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode9' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode9'>
            nextitem: <Function 'test_user_mode10'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode9'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode9' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode9' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode9' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode10'>
          nextitem: <Function 'test_user_mode11'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 74, 'TestMODE.test_user_mode10')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode10
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode10'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode10'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode10' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode10' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode10' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode10'>
            nextitem: <Function 'test_user_mode11'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode10'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode10' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode10' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode10' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode11'>
          nextitem: <Function 'test_user_mode12'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 79, 'TestMODE.test_user_mode11')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode11
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode11'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode11'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode11' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode11' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode11' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode11'>
            nextitem: <Function 'test_user_mode12'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode11'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode11' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode11' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode11' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_user_mode12'>
          nextitem: <Function 'test_channel_mode1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 84, 'TestMODE.test_user_mode12')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode12
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_user_mode12'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode12'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode12' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode12' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode12' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_user_mode12'>
            nextitem: <Function 'test_channel_mode1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_user_mode12'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode12' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode12' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode12' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode1'>
          nextitem: <Function 'test_channel_mode2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 90, 'TestMODE.test_channel_mode1')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode1'>
            nextitem: <Function 'test_channel_mode2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode2'>
          nextitem: <Function 'test_channel_mode3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 99, 'TestMODE.test_channel_mode2')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode2'>
            nextitem: <Function 'test_channel_mode3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode3'>
          nextitem: <Function 'test_channel_mode4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 108, 'TestMODE.test_channel_mode3')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode3'>
            nextitem: <Function 'test_channel_mode4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode4'>
          nextitem: <Function 'test_channel_mode5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 117, 'TestMODE.test_channel_mode4')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode4'>
            nextitem: <Function 'test_channel_mode5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode5'>
          nextitem: <Function 'test_channel_mode6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 126, 'TestMODE.test_channel_mode5')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode5'>
            nextitem: <Function 'test_channel_mode6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode6'>
          nextitem: <Function 'test_channel_mode7'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 134, 'TestMODE.test_channel_mode6')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode6'>
            nextitem: <Function 'test_channel_mode7'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode7'>
          nextitem: <Function 'test_channel_mode8'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 142, 'TestMODE.test_channel_mode7')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode7
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode7'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode7'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode7' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode7' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode7' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode7'>
            nextitem: <Function 'test_channel_mode8'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode7'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode7' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode7' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode7' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode8'>
          nextitem: <Function 'test_channel_mode9'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 150, 'TestMODE.test_channel_mode8')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode8
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode8'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode8'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode8' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode8' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode8' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode8'>
            nextitem: <Function 'test_channel_mode9'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode8'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode8' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode8' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode8' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode9'>
          nextitem: <Function 'test_channel_mode10'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 161, 'TestMODE.test_channel_mode9')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode9
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode9'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode9'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode9' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode9' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode9' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode9'>
            nextitem: <Function 'test_channel_mode10'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode9'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode9' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode9' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode9' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode10'>
          nextitem: <Function 'test_channel_mode11'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 175, 'TestMODE.test_channel_mode10')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode10
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode10'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode10'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode10' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode10' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode10' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode10'>
            nextitem: <Function 'test_channel_mode11'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode10'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode10' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode10' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode10' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode11'>
          nextitem: <Function 'test_channel_mode12'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 192, 'TestMODE.test_channel_mode11')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode11
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode11'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode11'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode11' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode11' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode11' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode11'>
            nextitem: <Function 'test_channel_mode12'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode11'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode11' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode11' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode11' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode12'>
          nextitem: <Function 'test_channel_mode13'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 209, 'TestMODE.test_channel_mode12')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode12
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode12'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode12'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode12' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode12' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode12' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode12'>
            nextitem: <Function 'test_channel_mode13'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode12'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode12' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode12' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode12' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode13'>
          nextitem: <Function 'test_channel_mode14'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 230, 'TestMODE.test_channel_mode13')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode13
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode13'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode13'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode13' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode13' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode13' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode13'>
            nextitem: <Function 'test_channel_mode14'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode13'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode13' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode13' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode13' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode14'>
          nextitem: <Function 'test_channel_mode15'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 239, 'TestMODE.test_channel_mode14')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode14
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode14'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode14'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode14' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode14' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode14' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode14'>
            nextitem: <Function 'test_channel_mode15'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode14'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode14' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode14' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode14' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode15'>
          nextitem: <Function 'test_channel_mode16'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 245, 'TestMODE.test_channel_mode15')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode15
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode15'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode15'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode15' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode15' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode15' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode15'>
            nextitem: <Function 'test_channel_mode16'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode15'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode15' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode15' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode15' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode16'>
          nextitem: <Function 'test_channel_mode17'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 251, 'TestMODE.test_channel_mode16')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode16
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode16'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode16'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode16' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode16' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode16' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode16'>
            nextitem: <Function 'test_channel_mode17'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode16'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode16' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode16' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode16' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode17'>
          nextitem: <Function 'test_channel_mode18'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 257, 'TestMODE.test_channel_mode17')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode17
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode17'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode17'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode17' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode17' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode17' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode17'>
            nextitem: <Function 'test_channel_mode18'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode17'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode17' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode17' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode17' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channel_mode18'>
          nextitem: <Function 'test_channeluser_mode1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 268, 'TestMODE.test_channel_mode18')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode18
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channel_mode18'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode18'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode18' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode18' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode18' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channel_mode18'>
            nextitem: <Function 'test_channeluser_mode1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channel_mode18'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode18' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode18' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode18' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode1'>
          nextitem: <Function 'test_channeluser_mode2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 278, 'TestMODE.test_channeluser_mode1')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode1'>
            nextitem: <Function 'test_channeluser_mode2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode2'>
          nextitem: <Function 'test_channeluser_mode3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 284, 'TestMODE.test_channeluser_mode2')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode2'>
            nextitem: <Function 'test_channeluser_mode3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode3'>
          nextitem: <Function 'test_channeluser_mode4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 295, 'TestMODE.test_channeluser_mode3')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode3'>
            nextitem: <Function 'test_channeluser_mode4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode4'>
          nextitem: <Function 'test_channeluser_mode5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 304, 'TestMODE.test_channeluser_mode4')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode4'>
            nextitem: <Function 'test_channeluser_mode5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode5'>
          nextitem: <Function 'test_channeluser_mode6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 313, 'TestMODE.test_channeluser_mode5')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode5'>
            nextitem: <Function 'test_channeluser_mode6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode6'>
          nextitem: <Function 'test_channeluser_mode7'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 324, 'TestMODE.test_channeluser_mode6')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode6'>
            nextitem: <Function 'test_channeluser_mode7'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode7'>
          nextitem: <Function 'test_channeluser_mode8'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 333, 'TestMODE.test_channeluser_mode7')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode7
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode7'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode7'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode7' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode7' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode7' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode7'>
            nextitem: <Function 'test_channeluser_mode8'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode7'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode7' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode7' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode7' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode8'>
          nextitem: <Function 'test_channeluser_mode9'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 343, 'TestMODE.test_channeluser_mode8')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode8
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode8'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode8'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode8' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode8' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode8' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode8'>
            nextitem: <Function 'test_channeluser_mode9'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode8'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode8' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode8' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode8' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode9'>
          nextitem: <Function 'test_channeluser_mode10'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 354, 'TestMODE.test_channeluser_mode9')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode9
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode9'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode9'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode9' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode9' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode9' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode9'>
            nextitem: <Function 'test_channeluser_mode10'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode9'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode9' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode9' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode9' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_channeluser_mode10'>
          nextitem: <Function 'test_connect_channels1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 365, 'TestMODE.test_channeluser_mode10')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode10
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_channeluser_mode10'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode10'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode10' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode10' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode10' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_channeluser_mode10'>
            nextitem: <Function 'test_connect_channels1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_channeluser_mode10'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode10' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode10' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode10' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_channels1'>
          nextitem: <Function 'test_connect_channels2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 386, 'TestMODE.test_connect_channels1')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_channels1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_channels1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_channels1'>
            nextitem: <Function 'test_connect_channels2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_channels1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_channels2'>
          nextitem: <Function 'test_connect_channels3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 390, 'TestMODE.test_connect_channels2')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_channels2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_channels2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_channels2'>
            nextitem: <Function 'test_connect_channels3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_channels2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_connect_channels3'>
          nextitem: <Function 'test_permissions_privmsg1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 394, 'TestMODE.test_connect_channels3')
            nodeid: tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_connect_channels3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_channels3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_connect_channels3'>
            nextitem: <Function 'test_permissions_privmsg1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_connect_channels3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_privmsg1'>
          nextitem: <Function 'test_permissions_privmsg2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 426, 'TestPermissions.test_permissions_privmsg1')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_privmsg1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_privmsg1'>
            nextitem: <Function 'test_permissions_privmsg2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_privmsg2'>
          nextitem: <Function 'test_permissions_privmsg3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 439, 'TestPermissions.test_permissions_privmsg2')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_privmsg2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_privmsg2'>
            nextitem: <Function 'test_permissions_privmsg3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_privmsg3'>
          nextitem: <Function 'test_permissions_privmsg4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 447, 'TestPermissions.test_permissions_privmsg3')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_privmsg3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_privmsg3'>
            nextitem: <Function 'test_permissions_privmsg4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_privmsg4'>
          nextitem: <Function 'test_permissions_privmsg5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 460, 'TestPermissions.test_permissions_privmsg4')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_privmsg4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_privmsg4'>
            nextitem: <Function 'test_permissions_privmsg5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_privmsg5'>
          nextitem: <Function 'test_permissions_notice'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 473, 'TestPermissions.test_permissions_privmsg5')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_privmsg5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_privmsg5'>
            nextitem: <Function 'test_permissions_notice'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_privmsg5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_notice'>
          nextitem: <Function 'test_permissions_topic1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 495, 'TestPermissions.test_permissions_notice')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_notice
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_notice'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_notice'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_notice' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_notice' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_notice' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_notice'>
            nextitem: <Function 'test_permissions_topic1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_notice'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_notice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_notice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_notice' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_topic1'>
          nextitem: <Function 'test_permissions_topic2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 507, 'TestPermissions.test_permissions_topic1')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_topic1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_topic1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_topic1'>
            nextitem: <Function 'test_permissions_topic2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_topic1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_topic2'>
          nextitem: <Function 'test_permissions_oper1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 520, 'TestPermissions.test_permissions_topic2')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_topic2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_topic2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_topic2'>
            nextitem: <Function 'test_permissions_oper1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_topic2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_oper1'>
          nextitem: <Function 'test_permissions_oper2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 536, 'TestPermissions.test_permissions_oper1')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_oper1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_oper1'>
            nextitem: <Function 'test_permissions_oper2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_oper2'>
          nextitem: <Function 'test_permissions_oper3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 550, 'TestPermissions.test_permissions_oper2')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_oper2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_oper2'>
            nextitem: <Function 'test_permissions_oper3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_oper3'>
          nextitem: <Function 'test_permissions_oper4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 563, 'TestPermissions.test_permissions_oper3')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_oper3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_oper3'>
            nextitem: <Function 'test_permissions_oper4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_oper4'>
          nextitem: <Function 'test_permissions_oper5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 577, 'TestPermissions.test_permissions_oper4')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_oper4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_oper4'>
            nextitem: <Function 'test_permissions_oper5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_oper5'>
          nextitem: <Function 'test_permissions_oper6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 587, 'TestPermissions.test_permissions_oper5')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_oper5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_oper5'>
            nextitem: <Function 'test_permissions_oper6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_permissions_oper6'>
          nextitem: <Function 'test_away1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 597, 'TestPermissions.test_permissions_oper6')
            nodeid: tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_permissions_oper6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_permissions_oper6'>
            nextitem: <Function 'test_away1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_permissions_oper6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_away1'>
          nextitem: <Function 'test_away2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 621, 'TestAWAY.test_away1')
            nodeid: tests/chirc/tests/test_modes.py::TestAWAY::()::test_away1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_away1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_away1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_away1'>
            nextitem: <Function 'test_away2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_away1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_away2'>
          nextitem: <Function 'test_away3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 626, 'TestAWAY.test_away2')
            nodeid: tests/chirc/tests/test_modes.py::TestAWAY::()::test_away2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_away2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_away2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_away2'>
            nextitem: <Function 'test_away3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_away2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_away3'>
          nextitem: <Function 'test_away4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 632, 'TestAWAY.test_away3')
            nodeid: tests/chirc/tests/test_modes.py::TestAWAY::()::test_away3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_away3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_away3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_away3'>
            nextitem: <Function 'test_away4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_away3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_away4'>
          nextitem: <Function 'test_away5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 637, 'TestAWAY.test_away4')
            nodeid: tests/chirc/tests/test_modes.py::TestAWAY::()::test_away4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_away4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_away4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_away4'>
            nextitem: <Function 'test_away5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_away4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_away5'>
          nextitem: <Function 'test_away6'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 653, 'TestAWAY.test_away5')
            nodeid: tests/chirc/tests/test_modes.py::TestAWAY::()::test_away5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_away5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_away5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_away5'>
            nextitem: <Function 'test_away6'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_away5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_away6'>
          nextitem: <Function 'test_ping'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_modes.py', 669, 'TestAWAY.test_away6')
            nodeid: tests/chirc/tests/test_modes.py::TestAWAY::()::test_away6
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_away6'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_away6'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away6' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away6' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away6' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_away6'>
            nextitem: <Function 'test_ping'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_away6'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away6' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away6' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_modes.py::TestAWAY::()::test_away6' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_ping'>
          nextitem: <Function 'test_multiping1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_ping.py', 6, 'TestPING.test_ping')
            nodeid: tests/chirc/tests/test_ping.py::TestPING::()::test_ping
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_ping'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_ping'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_ping' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_ping' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_ping' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_ping'>
            nextitem: <Function 'test_multiping1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_ping'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_ping' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_ping' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_ping' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_multiping1'>
          nextitem: <Function 'test_multiping2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_ping.py', 27, 'TestPING.test_multiping1')
            nodeid: tests/chirc/tests/test_ping.py::TestPING::()::test_multiping1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_multiping1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_multiping1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_multiping1'>
            nextitem: <Function 'test_multiping2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_multiping1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_multiping2'>
          nextitem: <Function 'test_multiping3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_ping.py', 30, 'TestPING.test_multiping2')
            nodeid: tests/chirc/tests/test_ping.py::TestPING::()::test_multiping2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_multiping2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_multiping2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_multiping2'>
            nextitem: <Function 'test_multiping3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_multiping2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_multiping3'>
          nextitem: <Function 'test_multiping4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_ping.py', 33, 'TestPING.test_multiping3')
            nodeid: tests/chirc/tests/test_ping.py::TestPING::()::test_multiping3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_multiping3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_multiping3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_multiping3'>
            nextitem: <Function 'test_multiping4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_multiping3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_multiping4'>
          nextitem: <Function 'test_pong'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_ping.py', 36, 'TestPING.test_multiping4')
            nodeid: tests/chirc/tests/test_ping.py::TestPING::()::test_multiping4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_multiping4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_multiping4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_multiping4'>
            nextitem: <Function 'test_pong'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_multiping4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPING::()::test_multiping4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_pong'>
          nextitem: <Function 'test_privmsg1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_ping.py', 42, 'TestPONG.test_pong')
            nodeid: tests/chirc/tests/test_ping.py::TestPONG::()::test_pong
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_pong'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_pong'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPONG::()::test_pong' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPONG::()::test_pong' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPONG::()::test_pong' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_pong'>
            nextitem: <Function 'test_privmsg1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_pong'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_ping.py::TestPONG::()::test_pong' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_ping.py::TestPONG::()::test_pong' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_ping.py::TestPONG::()::test_pong' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_privmsg1'>
          nextitem: <Function 'test_privmsg2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 11, 'TestPRIVMSG.test_privmsg1')
            nodeid: tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_privmsg1'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_privmsg1'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x1036395f8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg1'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_privmsg1'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_privmsg1'>
          find_module called for: encodings.idna [assertion]
          find_module called for: stringprep [assertion]
          find_module called for: unicodedata [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg1'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_privmsg1'>
            nextitem: <Function 'test_privmsg2'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_privmsg2'>
          nextitem: <Function 'test_privmsg_multiple1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 20, 'TestPRIVMSG.test_privmsg2')
            nodeid: tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_privmsg2'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_privmsg2'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x10362ccf8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg2'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_privmsg2'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_privmsg2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg2'>
            call: <CallInfo when='call' exception: Expected a prefix, but got none.
Message: |||PRIVMSG user2 :Message 4|||>
        find_module called for: py._io.saferepr [assertion]
        find_module called for: repr [assertion]
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='call' outcome='failed'>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function 'test_privmsg2'>
            call: <CallInfo when='call' exception: Expected a prefix, but got none.
Message: |||PRIVMSG user2 :Message 4|||>
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_privmsg2'>
            nextitem: <Function 'test_privmsg_multiple1'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_privmsg_multiple1'>
          nextitem: <Function 'test_privmsg_multiple2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 80, 'TestPRIVMSG.test_privmsg_multiple1')
            nodeid: tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_privmsg_multiple1'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_privmsg_multiple1'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x1035ff9e8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple1'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_privmsg_multiple1'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_privmsg_multiple1'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple1'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_privmsg_multiple1'>
            nextitem: <Function 'test_privmsg_multiple2'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_privmsg_multiple2'>
          nextitem: <Function 'test_privmsg_multiple3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 83, 'TestPRIVMSG.test_privmsg_multiple2')
            nodeid: tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_privmsg_multiple2'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_privmsg_multiple2'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x103656c50> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple2'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_privmsg_multiple2'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_privmsg_multiple2'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple2'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_privmsg_multiple2'>
            nextitem: <Function 'test_privmsg_multiple3'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_privmsg_multiple3'>
          nextitem: <Function 'test_privmsg_multiple4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 86, 'TestPRIVMSG.test_privmsg_multiple3')
            nodeid: tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_privmsg_multiple3'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_privmsg_multiple3'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x103635cc0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple3'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_privmsg_multiple3'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_privmsg_multiple3'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple3'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_privmsg_multiple3'>
            nextitem: <Function 'test_privmsg_multiple4'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_privmsg_multiple4'>
          nextitem: <Function 'test_privmsg_multiple5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 89, 'TestPRIVMSG.test_privmsg_multiple4')
            nodeid: tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_privmsg_multiple4'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_privmsg_multiple4'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x103757cf8> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple4'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_privmsg_multiple4'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_privmsg_multiple4'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple4'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_privmsg_multiple4'>
            nextitem: <Function 'test_privmsg_multiple5'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_privmsg_multiple5'>
          nextitem: <Function 'test_privmsg_nonick'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 92, 'TestPRIVMSG.test_privmsg_multiple5')
            nodeid: tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_privmsg_multiple5'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_privmsg_multiple5'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x103639400> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple5'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_privmsg_multiple5'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_privmsg_multiple5'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple5'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_privmsg_multiple5'>
            nextitem: <Function 'test_privmsg_nonick'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_multiple5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_privmsg_nonick'>
          nextitem: <Function 'test_notice'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 95, 'TestPRIVMSG.test_privmsg_nonick')
            nodeid: tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_privmsg_nonick'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_privmsg_nonick'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x103649668> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_nonick'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_privmsg_nonick'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_privmsg_nonick'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_nonick'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_privmsg_nonick'>
            nextitem: <Function 'test_notice'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_privmsg_nonick'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_notice'>
          nextitem: <Function 'test_notice_nonick'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 108, 'TestNOTICE.test_notice')
            nodeid: tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_notice'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_notice'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x103304780> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_notice'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_notice'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_notice'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_notice'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_notice'>
            nextitem: <Function 'test_notice_nonick'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_notice'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_notice_nonick'>
          nextitem: <Function 'test_whitespace1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_privmsg.py', 116, 'TestNOTICE.test_notice_nonick')
            nodeid: tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_notice_nonick'>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
              request: <SubRequest 'irc_session' for <Function 'test_notice_nonick'>>
          finish pytest_fixture_setup --> <chirc.tests.common.IRCSession object at 0x10357b898> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_notice_nonick'>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick' when='setup' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function 'test_notice_nonick'>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function 'test_notice_nonick'>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_notice_nonick'>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick' when='call' outcome='passed'>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_notice_nonick'>
            nextitem: <Function 'test_whitespace1'>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef name='irc_session' scope='function' baseid='tests' >
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_notice_nonick'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_whitespace1'>
          nextitem: <Function 'test_whitespace2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_robustness.py', 7, 'TestRobustness.test_whitespace1')
            nodeid: tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_whitespace1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_whitespace1'>
            nextitem: <Function 'test_whitespace2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_whitespace2'>
          nextitem: <Function 'test_whitespace3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_robustness.py', 15, 'TestRobustness.test_whitespace2')
            nodeid: tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_whitespace2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_whitespace2'>
            nextitem: <Function 'test_whitespace3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_whitespace3'>
          nextitem: <Function 'test_whitespace4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_robustness.py', 23, 'TestRobustness.test_whitespace3')
            nodeid: tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_whitespace3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_whitespace3'>
            nextitem: <Function 'test_whitespace4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_whitespace4'>
          nextitem: <Function 'test_whitespace5'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_robustness.py', 31, 'TestRobustness.test_whitespace4')
            nodeid: tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_whitespace4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_whitespace4'>
            nextitem: <Function 'test_whitespace5'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_whitespace5'>
          nextitem: <Function 'test_length1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_robustness.py', 39, 'TestRobustness.test_whitespace5')
            nodeid: tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace5
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_whitespace5'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace5'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace5' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace5' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace5' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_whitespace5'>
            nextitem: <Function 'test_length1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_whitespace5'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace5' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace5' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace5' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_length1'>
          nextitem: <Function 'test_length2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_robustness.py', 54, 'TestRobustness.test_length1')
            nodeid: tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_length1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_length1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_length1'>
            nextitem: <Function 'test_length2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_length1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_length2'>
          nextitem: <Function 'test_length3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_robustness.py', 72, 'TestRobustness.test_length2')
            nodeid: tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_length2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_length2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_length2'>
            nextitem: <Function 'test_length3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_length2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_length3'>
          nextitem: <Function 'test_length4'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_robustness.py', 90, 'TestRobustness.test_length3')
            nodeid: tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_length3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_length3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_length3'>
            nextitem: <Function 'test_length4'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_length3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_length4'>
          nextitem: <Function 'test_unknown1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_robustness.py', 114, 'TestRobustness.test_length4')
            nodeid: tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length4
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_length4'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_length4'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length4' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length4' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length4' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_length4'>
            nextitem: <Function 'test_unknown1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_length4'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length4' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_unknown1'>
          nextitem: <Function 'test_unknown2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_unknown.py', 6, 'TestUnknownCommands.test_unknown1')
            nodeid: tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_unknown1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_unknown1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_unknown1'>
            nextitem: <Function 'test_unknown2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_unknown1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_unknown2'>
          nextitem: <Function 'test_unknown3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_unknown.py', 16, 'TestUnknownCommands.test_unknown2')
            nodeid: tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_unknown2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_unknown2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_unknown2'>
            nextitem: <Function 'test_unknown3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_unknown2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_unknown3'>
          nextitem: <Function 'test_whois1'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_unknown.py', 26, 'TestUnknownCommands.test_unknown3')
            nodeid: tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_unknown3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_unknown3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_unknown3'>
            nextitem: <Function 'test_whois1'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_unknown3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_whois1'>
          nextitem: <Function 'test_whois_nonick'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_whois.py', 7, 'TestWHOIS.test_whois1')
            nodeid: tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois1
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_whois1'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_whois1'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois1' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois1' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois1' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_whois1'>
            nextitem: <Function 'test_whois_nonick'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_whois1'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois1' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_whois_nonick'>
          nextitem: <Function 'test_whois2'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_whois.py', 24, 'TestWHOIS.test_whois_nonick')
            nodeid: tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois_nonick
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_whois_nonick'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_whois_nonick'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois_nonick' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois_nonick' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois_nonick' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_whois_nonick'>
            nextitem: <Function 'test_whois2'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_whois_nonick'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois_nonick' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois_nonick' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois_nonick' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_whois2'>
          nextitem: <Function 'test_whois3'>
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_whois.py', 48, 'TestWHOIS.test_whois2')
            nodeid: tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois2
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_whois2'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_whois2'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois2' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois2' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois2' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_whois2'>
            nextitem: <Function 'test_whois3'>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_whois2'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois2' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function 'test_whois3'>
          nextitem: None
        pytest_runtest_logstart [hook]
            location: ('tests/chirc/tests/test_whois.py', 68, 'TestWHOIS.test_whois3')
            nodeid: tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois3
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function 'test_whois3'>
        pytest_runtest_makereport [hook]
            item: <Function 'test_whois3'>
            call: <CallInfo when='setup' exception: Only running tests in category PRIVMSG_NOTICE>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois3' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois3' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois3' when='setup' outcome='skipped'>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function 'test_whois3'>
            nextitem: None
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function 'test_whois3'>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois3' when='teardown' outcome='passed'>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session 'chirc'>
        exitstatus: 1
    cache-write cache/lastfailed: {'tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2': True} [cache]
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x10350a940>
          exitstatus: 1
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x10322b128>
    finish pytest_unconfigure --> [] [hook]
  finish [config:tmpdir]
